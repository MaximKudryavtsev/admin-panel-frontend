{"version":3,"sources":["components/avatar/user.svg","context/AppContext.ts","components/custom-form/CustomForm.tsx","components/text-field/TextField.tsx","config/host.ts","config/ApiPaths.ts","config/sidebarLinks.ts","api/user.ts","utils/serverError.ts","utils/file.ts","utils/date.ts","pages/login/Login.tsx","api/login.ts","transport/Transport.ts","hooks/useUser.ts","hooks/useSnackbar.ts","hooks/useNavigation.ts","api/navigation.ts","hooks/page/usePageList.ts","api/page.ts","hooks/page/usePage.ts","hooks/page/useCreatePage.ts","components/navigation-item/NavigationItem.tsx","components/popup/Popup.tsx","components/select/Select.tsx","components/switch-field/SwitchField.tsx","widgets/add-navigation/NavigationPopup.tsx","components/confirm-popup/ConfirmPopup.tsx","widgets/navigation-panel/NavigationPanel.tsx","pages/navigation/navigation-content/NavigationContent.tsx","pages/navigation/Navigation.tsx","pages/footer/Footer.tsx","widgets/sidebar/Sidebar.tsx","components/menu/Menu.tsx","widgets/layout/Layout.tsx","components/card/Card.tsx","components/snackbar/Snackbar.tsx","widgets/change-password/ChangePassword.tsx","widgets/update-user-form/UpdateUserForm.tsx","components/avatar/Avatar.tsx","widgets/upload-avatar/UploadAvatar.tsx","hooks/useFile.ts","widgets/create-page-popup/CreatePagePopup.tsx","pages/profile/Profile.tsx","widgets/table-wrapper/TableWrapper.tsx","pages/pages-list/PagesList.tsx","widgets/language-tab/LanguageTab.tsx","pages/pages/Pages.tsx","pages/page/Page.tsx","pages/work-panel/WorkPanel.tsx","components/private-route/PrivateRoute.tsx","components/public-route/PublicRoute.tsx","pages/forgot-password/ForgotPassword.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","history","createBrowserHistory","AppContext","CustomForm","props","data","onSubmit","validationSchema","render","validate","validateOnBlur","validateOnChange","handleSubmit","useCallback","initialValues","stubObject","enableReinitialize","styles","errorMessage","emotion","errorText","TextField","name","label","error","classes","type","size","InputLabelProps","field","meta","variant","fullWidth","helperText","className","FormHelperTextProps","root","margin","host","LOCAL","ApiPaths","SIGN_IN","UPDATE_TOKEN","FORGOT_PASSWORD","GET_USER","UPDATE_USER","UPDATE_PASSWORD","DELETE_USER","UPDATE_AVATAR","DELETE_AVATAR","GET_NAVIGATION","GET_NAVIGATION_TYPES","GET_NAVIGATION_LIST","UPDATE_NAVIGATION","CREATE_NAVIGATION","REORDER_NAVIGATION","DELETE_NAVIGATION","CREATE_PAGE","GET_PAGE_LIST","GET_PAGE","GET_PAGE_STATUSES","GET_PAGE_AUTHOR","sidebarLinks","title","link","adminSidebarLinks","fetchUser","transport","get","getServerError","response","dataURLtoFile","dataurl","filename","head","split","src","last","mime","match","byteString","atob","n","length","u8arr","Uint8Array","charCodeAt","blob","Blob","File","getExtension","resolve","file","reader","FileReader","readAsArrayBuffer","onloadend","result","ext","fileType","getUnsafeExtension","toLowerCase","formatData","date","format","moment","LoginSchema","Yup","shape","email","required","password","min","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","submit","marginBottom","row","loader","Login","onSetUser","onSignIn","useState","loaderVisible","setLoaderVisible","undefined","serverErrorMessage","setServerErrorMessage","Fragment","post","signIn","then","setToken","push","catch","err","Container","component","maxWidth","CssBaseline","Lock","Typography","LinearProgress","color","align","Button","onClick","submitForm","disabled","Grid","container","item","xs","to","Transport","headers","token","instance","axios","create","baseURL","url","params","this","config","put","delete","localStorage","setItem","JSON","stringify","formData","FormData","mapValues","value","key","isString","append","useUser","user","setUser","useMemo","tokenString","getItem","parse","fetchOne","console","update","updateUser","delUser","deleteUser","updatePass","updatePassword","onUpdateAvatar","updateAvatar","formatToFormData","onDeleteAvatar","deleteAvatar","useEffect","useSnackbar","setSnackbarError","open","message","snackbar","setSnackbarState","onSnackbarClose","event","reason","setTimeout","useNavigation","lang","navigationTypes","setNavigationTypes","navigations","setNavigations","navigation","setNavigation","getTypes","getNavigationTypes","getList","getNavigationList","id","replace","getNavigation","createNavigation","updateNavigation","_id","onDeleteNavigation","deleteNavigation","reorder","order","reorderNavigations","reorderNavigation","usePageList","list","setList","fetchPageList","pages","getPages","usePage","pageId","page","setPage","pageAuthor","setPageAuthor","statuses","setStatuses","getPage","fetchPage","getStatuses","fetchPageStatusList","getAuthor","fetchPageAuthor","updatePage","useCreatePage","createPage","css","icons","icon","NavigationItem","onChangeVisibility","onDelete","onEdit","onOpenChildren","dragHandleProps","draggableProps","innerRef","Paper","ref","IconButton","DragIndicator","isVisible","Visibility","VisibilityOff","Edit","Delete","hasChild","ArrowForwardIos","popup","header","close","Popup","onClose","children","Dialog","DialogTitle","disableTypography","Close","Select","options","inputLabel","React","useRef","labelWidth","setLabelWidth","current","offsetWidth","FormControl","InputLabel","map","option","MenuItem","FormHelperText","SwitchField","FormControlLabel","control","Switch","checked","content","ValidationSchema","navigationTypeId","NavigationPopup","navigationsTypes","isChildren","transform","startIcon","Save","isValid","isEqual","values","navigationType","button","actions","ConfirmPopup","cancelTitle","submitTitle","DialogActions","wrapper","closeChildren","NavigationPanel","currentNavigation","createOpen","setCreateOpen","editOpen","setEditOpen","currentNavigationId","setCurrentNavigationId","parentId","setParentId","deleteOpen","setDeleteOpen","childrenVisible","setChildrenVisible","setChildren","onCreateClose","onEditOpen","onEditClose","onDeleteClose","childItems","filter","nav","find","onCloseChildren","sort","left","right","position","onGetNavigation","childrenNavigation","onDragEnd","destination","source","index","droppableId","direction","provided","droppableProps","draggableId","placeholder","Fab","aria-label","Add","NavigationContent","Navigation","setPageTitle","setValue","Tabs","onChange","newValue","indicatorColor","textColor","Tab","Footer","drawer","drawerPaper","toolbar","childrenNav","Sidebar","Drawer","anchor","Divider","List","ListItem","ListItemText","primary","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","handler","appBar","avatarIcon","Layout","onLogout","setAnchorEl","isMenuOpen","Boolean","logoutPopupVisible","setLogoutPopupVisible","handleMenuClose","AppBar","Toolbar","noWrap","Tooltip","login","currentTarget","AccountCircle","card","Card","elevation","Snackbar","autoHideDuration","SnackbarContent","background","red","green","boxShadow","CheckCircle","action","displayName","editButton","formWrapper","msg","test","exclusive","reference","path","currentPassword","newPassword","equalTo","repeatPassword","ChangePassword","popupVisible","setPopupVisible","emailWrapper","info","UpdateUserForm","shrink","cn","Info","DEFAULT","require","image","Avatar","alt","input","progress","UploadAvatar","uploadAvatar","loading","modalOpen","setModalOpen","inputRef","setFile","setSrc","setError","getError","a","async","maxFileSize","Promise","whiteList","indexOf","loadFile","f","readAsDataURL","fromEvent","subscribe","deleteFile","useFile","onModalClose","click","CloudUpload","target","files","classNames","CreatePagePopup","visible","Profile","avatarLoaderVisible","setAvatarLoaderVisible","passwordError","setPasswordError","serverError","roles","role","Chip","TableWrapper","buttonTitle","headCell","bodyRow","PagesList","body","setLanguage","modalVisible","setModalVisible","onCreatePage","Table","TableHead","TableRow","TableCell","TableBody","Link","onMouseDown","author","status","createdAt","updatedAt","LanguageTab","Children","child","Pages","language","line","fieldLine","mb24","Page","useParams","String","ArrowBack","href","CircularProgress","WorkPanel","baseUrl","setTitle","exact","PrivateRoute","auth","rest","routeProps","PublicRoute","restricted","FormSchema","successMessage","ForgotPassword","setSuccessMessage","forgotPassword","App","logged","setLogged","removeItem","logout","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mLAAAA,EAAOC,QAAU,IAA0B,kC,6GCCrCC,EAAUC,cAEHC,EAAa,WAElB,OAAQF,G,gBCaHG,EAAa,SAAmBC,GAAgC,IAAD,EASpEA,EAPAC,YAFoE,MAE7D,GAF6D,EAGpEC,EAMAF,EANAE,SACAC,EAKAH,EALAG,iBACAC,EAIAJ,EAJAI,OACAC,EAGAL,EAHAK,SANoE,EASpEL,EAFAM,sBAPoE,WASpEN,EADAO,wBARoE,SAWlEC,EAAeC,uBACjB,SAACR,GACQC,GAGLA,EAASD,KAEb,CAACC,IAGL,OACI,kBAAC,IAAD,CACIQ,cAAeT,GAAQU,uBACvBT,SAAUM,EACVH,SAAUA,EACVF,iBAAkBA,EAClBI,iBAAkBA,EAClBD,eAAgBA,EAChBM,oBAAkB,IAEjB,SAACZ,GAAD,OAAWI,EAAOJ,O,0TChC/B,IAAMa,EAAS,CACXC,aAAcC,IAAF,KAKZC,UAAWD,IAAF,MAKAE,EAAY,SAACjB,GAA4B,IAC1CkB,EAAsElB,EAAtEkB,KAAMC,EAAgEnB,EAAhEmB,MAAOC,EAAyDpB,EAAzDoB,MAAOC,EAAkDrB,EAAlDqB,QADqB,EAC6BrB,EAAzCsB,YADY,MACL,OADK,EACGC,EAA0BvB,EAA1BuB,KAAMC,EAAoBxB,EAApBwB,gBAE1D,OACI,kBAAC,IAAD,CAAON,KAAMA,IACR,gBAAGO,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,kBAAC,IAAD,eACIC,QAAQ,WACRC,WAAS,EACTT,MAAOA,EACPG,KAAMA,EACNF,QAASM,EAAKN,OAASA,EACvBG,KAAMA,EACNC,gBAAiBA,EACjBK,WACIH,EAAKN,OACD,oCACI,kBAAC,IAAD,MACA,0BAAMU,UAAWjB,EAAOG,WAAYU,EAAKN,QAIrDW,oBAAqB,CACjBV,QAAS,CAAEW,KAAMnB,EAAOC,eAE5BO,QAASA,EACTY,OAAO,UACHR,Q,QCvDXS,EAAO,CAChBC,MAAO,yBCDEC,EAAW,CACpBC,QAAS,gBACTC,aAAc,qBACdC,gBAAiB,wBACjBC,SAAU,WACVC,YAAa,cACbC,gBAAiB,uBACjBC,YAAa,cACbC,cAAe,qBACfC,cAAe,qBAEfC,eAAgB,mBAChBC,qBAAsB,qBACtBC,oBAAqB,oBACrBC,kBAAmB,0BACnBC,kBAAmB,sBACnBC,mBAAoB,uBACpBC,kBAAmB,0BAEnBC,YAAa,eACbC,cAAe,aACfC,SAAU,YACVC,kBAAmB,iBACnBC,gBAAiB,oBClBRC,EAA+B,CACxC,CACIC,MAAO,iCACPC,KAAM,iBAEV,CACID,MAAO,yDACPC,KAAM,qBAEV,CACID,MAAO,iCACPC,KAAM,iBAEV,CACID,MAAO,mDACPC,KAAM,iBAIDC,EAAoC,CAC7C,CACIF,MAAO,2EACPC,KAAM,gBAEV,CACID,MAAO,uCACPC,KAAM,mBC3BP,SAASE,EAAUC,GACtB,OAAOA,EAAUC,IAAW5B,EAASI,U,2ECFlC,SAASyB,EAAe7C,GAC3B,IAAM8C,EAAW9C,EAAM8C,SACvB,GAAKA,EAGL,OAAOA,EAASjE,KAAKmB,M,sBCLlB,SAAS+C,EAAcC,EAAiBC,GAQ3C,IAPA,IAAM/C,EAAOgD,eAAKF,EAAQG,MAAM,MAC1BC,EAAMC,eAAKL,EAAQG,MAAM,MAEzBG,EAAOD,eAAKnD,EAAMqD,MAAM,YACxBC,EAAaC,KAAKL,GACpBM,EAAIF,EAAWG,OACbC,EAAQ,IAAIC,WAAWH,GACtBA,GACHE,EAAMF,EAAI,GAAKF,EAAWM,WAAWJ,EAAI,GACzCA,GAAK,EAET,IAAMK,EAAO,IAAIC,KAAK,CAACJ,GAAQ,CAAE1D,KAAMoD,IAEvC,OADa,IAAIW,KAAK,CAACF,GAAOd,EAAU,CAAE/C,KAAMoD,IAI7C,SAASY,EAAaC,EAAgCC,GACzD,IAAMC,EAAS,IAAIC,WACdF,IAGLC,EAAOE,kBAAkBH,GACxBC,EAAOG,UAAY,WAChB,IAAMC,EAASJ,EAAOI,OAChBC,EAAM9B,cAAI+B,IAASF,GAAS,MAAO,IACzCN,EAAQO,KAIT,SAASE,EAAmBR,GAC/B,OAAQf,eAAKe,EAAKtE,KAAKqD,MAAM,OAAS,IAAI0B,c,sBChCvC,SAASC,EAAWC,EAAqBC,GAC5C,OAAOC,IAAOF,GAAMC,OAAOA,G,uCCqBzBE,EAAcC,WAAaC,MAAM,CACnCC,MAAOF,WACFE,MAAM,uEACNC,SAAS,+KACdC,SAAUJ,WACLK,IAAI,EAAG,kOACPF,SAAS,iLAWZG,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJrF,OAAQ8E,EAAMG,QAAQ,GACtBK,gBAAiBR,EAAMS,QAAQC,UAAUC,MAE7CC,KAAM,CACFC,MAAO,OACPX,UAAWF,EAAMG,QAAQ,IAE7BW,OAAQ,CACJC,aAAc,IAElBrG,MAAO,CACHQ,OAAQ,cAEZ8F,IAAK,CACDD,aAAc,IAElBE,OAAQ,CACJJ,MAAO,OACPE,aAAc,QAITG,EAAQ,SAACjI,GAAwB,IAClC+D,EAAmC/D,EAAnC+D,UAAWmE,EAAwBlI,EAAxBkI,UAAWC,EAAanI,EAAbmI,SADW,EAECC,oBAAS,GAFV,mBAElCC,EAFkC,KAEnBC,EAFmB,OAGWF,wBAA6BG,GAHxC,mBAGlCC,EAHkC,KAGdC,EAHc,KA6BnCpH,EAAUwF,IAEhB,OACI,kBAAC,IAAM6B,SAAP,KACI,kBAAC,IAAD,KACI,sGAEJ,kBAAC,EAAD,CACIxI,SAhCK,SAACD,GACdqI,GAAiB,GACjBG,OAAsBF,GC1EvB,SAAgBxE,EAAsB9D,GACzC,OAAO8D,EAAU4E,KAAqBvG,EAASC,QAASpC,GD0EpD2I,CAAO7E,EAAW9D,GACb4I,MAAK,SAAC3E,GAAD,OAAcH,EAAU+E,SAAS5E,EAASjE,SAC/C4I,MAAK,WACF/E,EAAUC,GACL8E,MAAK,SAAC3E,GACCgE,IACAA,EAAUhE,EAASjE,MACfkI,IACAA,IACArI,IAAwBiJ,KAAK,0BAIxCC,OAAM,kBAAMlJ,IAAwBiJ,KAAK,kBAEjDC,OAAM,SAAC5H,GACJ,IAAM6H,EAAMhF,EAAe7C,GAC3BqH,EAAqB,OAACQ,QAAD,IAACA,OAAD,EAACA,EAAKtF,OAC3B2E,GAAiB,OAYjBnI,iBAAkBmG,EAClB/F,kBAAgB,EAChBH,OAAQ,SAACuH,GAAD,OACJ,kBAACuB,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,kBAACC,EAAA,EAAD,MACA,yBAAKvH,UAAWT,EAAQ2F,OACpB,kBAAC,IAAD,CAAQlF,UAAWT,EAAQiG,QACvB,kBAACgC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYJ,UAAU,KAAKxH,QAAQ,KAAKG,UAAWT,EAAQ0G,KAA3D,sEAGA,kBAAC,EAAD,CACI7G,KAAM,QACNC,MAAO,SACPC,QAASoH,EACTnH,QAAS,CAAEW,KAAMX,EAAQI,SAE7B,kBAAC,EAAD,CACIP,KAAM,WACNC,MAAO,uCACPC,QAASoH,EACTlH,KAAM,WACND,QAAS,CAAEW,KAAMX,EAAQI,SAE5B4G,GAAiB,kBAACmB,EAAA,EAAD,CAAgB1H,UAAS,UAAKT,EAAQ2G,OAAb,YAAuB3G,EAAQ0G,OACzES,GACG,kBAACe,EAAA,EAAD,CAAYE,MAAO,QAASC,MAAO,SAAU5H,UAAWT,EAAQ0G,KAC3DS,GAGT,kBAACmB,EAAA,EAAD,CACI/H,WAAS,EACTD,QAAQ,YACR8H,MAAM,UACNG,QAAO,OAAEjC,QAAF,IAAEA,OAAF,EAAEA,EAAMkC,WACfC,SAAUzB,EACVvG,UAAWT,EAAQwG,QANvB,kCAUA,kBAACkC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACT,kBAAC,IAAD,CAAMC,GAAG,oBAAT,uF,oGEhJvBC,GAAb,kDACYC,QAAU,GADtB,KAEYC,WAFZ,OAIqBC,SAAWC,KAAMC,OAAO,CACrCC,QAASxI,EAAKC,QALtB,iDAQwBwI,EAAaC,GARrC,oGAS+BC,KAAKN,SAASvG,IAAI2G,EAAKE,KAAKC,OAAOF,KATlE,cASc1G,EATd,yBAUeA,EAASjE,MAVxB,4EAcQ0K,EACA1K,EACA2K,GAhBR,oGAkB+BC,KAAKN,SAAS5B,KAAKgC,EAAK1K,EAAM4K,KAAKC,OAAOF,KAlBzE,cAkBc1G,EAlBd,yBAmBeA,EAASjE,MAnBxB,2EAuBQ0K,EACA1K,EACA2K,GAzBR,oGA2B+BC,KAAKN,SAASQ,IAAIJ,EAAK1K,EAAM4K,KAAKC,OAAOF,KA3BxE,cA2Bc1G,EA3Bd,yBA4BeA,EAASjE,MA5BxB,8EA+BkC0K,EAAaC,GA/B/C,oGAgC+BC,KAAKN,SAASS,OAAOL,EAAKE,KAAKC,OAAOF,KAhCrE,cAgCc1G,EAhCd,yBAiCeA,EAASjE,MAjCxB,gFAoCaqK,GACLO,KAAKP,MAAQA,EACbW,aAAaC,QAAQ,QAASC,KAAKC,UAAUd,MAtCrD,uCAyCqBM,GACb,IAAMS,EAAW,IAAIC,SAQrB,OAPAC,oBAAUX,GAAQ,SAACY,EAAsBC,GAErC,MADgBC,mBAASF,IAAWA,aAAwBnG,QAC5CqG,mBAASF,GACrB,OAAOH,EAASM,OAAOF,EAAKN,KAAKC,UAAUI,IAE/CH,EAASM,OAAOF,EAAKD,MAElBH,IAlDf,6BAqDmBT,GACX,MAAO,CACHF,QAASxI,EAAKC,MACdkI,QAAQ,gBACDQ,KAAKR,QADL,GAEAQ,KAAKP,MAFL,CAGH,eAAgB,qBAEpBM,cA7DZ,KCHO,SAASgB,KAQb,IAAD,EAC0BxD,wBAA4BG,GADtD,mBACSsD,EADT,KACeC,EADf,KAEQ/H,EAAYgI,mBAAQ,kBAAM,IAAI3B,KAAa,IAC3C4B,EAAcf,aAAagB,QAAQ,SACzClI,EAAU+E,SAASqC,KAAKe,MAAMF,IAE9B,IAAMG,EAAW1L,uBACb,kBACIqD,EAAUC,GACL8E,MAAK,SAAC3E,GAAD,OAAc4H,EAAQ5H,EAASjE,SACpC+I,MAAMoD,QAAQhL,SACvB,CAAC2C,EAAW+H,IAGVO,EAAS5L,uBACX,SAACoL,GACG,OPrBL,SAAoB9H,EAAsB8H,GAC7C,OAAO9H,EAAUgH,IAA2B3I,EAASK,YAAaoJ,GOoBnDS,CAAWvI,EAAW8H,GAAMhD,MAAK,SAAC3E,GAAD,OAAc4H,EAAQ5H,EAASjE,WAE3E,CAAC8D,EAAW+H,IAGVS,EAAU9L,uBAAY,WACxB,OPnBD,SAAoBsD,GACvB,OAAOA,EAAUiH,OAAO5I,EAASO,aOkBtB6J,CAAWzI,KACnB,CAACA,IAEE0I,EAAahM,uBACf,SAACR,GACG,OP5BL,SAAwB8D,EAAsB9D,GACjD,OAAO8D,EAAUgH,IAA+B3I,EAASM,gBAAiBzC,GO2B3DyM,CAAe3I,EAAW9D,KAErC,CAAC8D,IAGC4I,EAAiBlM,uBACnB,SAACR,GACG,OP3BL,SAAsB8D,EAAsB9D,GAC/C,OAAO8D,EAAUgH,IAAqB3I,EAASQ,cAAe3C,GO0B/C2M,CAAa7I,EAAWA,EAAU8I,iBAAiB5M,IAAO4I,MAAK,SAAC3E,GAAD,OAClE4H,EAAQ5H,EAASjE,WAGzB,CAAC8D,IAGC+I,EAAiBrM,uBAAY,WAC/B,OP/BD,SAAsBsD,GACzB,OAAOA,EAAUiH,OAAc5I,EAASS,eO8B7BkK,CAAahJ,GAAW8E,MAAK,SAAC3E,GAAD,OAAc4H,EAAQ5H,EAASjE,WACpE,CAAC8D,IAMJ,OAJAiJ,qBAAU,WACNb,MACD,CAACA,IAEG,CACHN,OACAM,WACAG,WAAYD,EACZG,WAAYD,EACZG,eAAgBD,EAChBG,aAAcD,EACdI,aAAcD,G,cC9Df,SAASG,KAMb,IAAD,EACoC7E,oBAAS,GAD7C,mBACShH,EADT,KACgB8L,EADhB,OAEuC9E,mBAAS,CAAE+E,MAAM,EAAOC,QAAS,KAFxE,mBAESC,EAFT,KAEmBC,EAFnB,KAaE,MAAO,CAAClM,QAAOiM,WAAUH,mBAAkBI,mBAAkBC,gBAT7D,SAAyBC,EAA8BC,GACpC,cAAXA,IAGJH,EAAiB,CAAEH,MAAM,EAAOC,QAAS,KAEzCM,YAAW,kBAAMR,GAAiB,KAAQ,QCJ3C,SAASS,GACZC,GAWD,IAVCtM,EAUF,uDAVyB,aAUzB,EACgD8G,mBAA4B,IAD5E,mBACSyF,EADT,KAC0BC,EAD1B,OAEwC1F,mBAAwB,IAFhE,mBAES2F,EAFT,KAEsBC,EAFtB,OAGsC5F,wBAAkCG,GAHxE,mBAGS0F,EAHT,KAGqBC,EAHrB,KAKQnK,EAAYgI,mBAAQ,kBAAM,IAAI3B,KAAa,IAC3C4B,EAAcf,aAAagB,QAAQ,SACzClI,EAAU+E,SAASqC,KAAKe,MAAMF,IAE9B,IAAMmC,EAAW1N,uBAAY,WACzB,OC9BD,SAA4BsD,EAAsBzC,GACrD,OAAOyC,EAAUC,IAAuB5B,EAASW,qBAAsB,CAACzB,SD6B7D8M,CAAmBrK,EAAWzC,GAAMuH,MAAK,SAAC3E,GAAD,OAAc4J,EAAmB5J,EAASjE,WAC3F,CAAC8D,EAAWzC,IAET+M,EAAU5N,uBAAY,WACxB,OC9BD,SAA2BsD,EAAsB6J,EAAatM,GACjE,OAAOyC,EAAUC,IAAmB5B,EAASY,oBAAqB,CAAE4K,OAAMtM,SD6B/DgN,CAAkBvK,EAAW6J,EAAMtM,GAAMuH,MAAK,SAAC3E,GAAD,OAAc8J,EAAe9J,EAASjE,WAC5F,CAAC8D,EAAWzC,EAAMsM,IAEf5J,EAAMvD,uBACR,SAAC8N,GACG,OC/BL,SAAuBxK,EAAsBwK,GAChD,OAAOxK,EAAUC,IAAiB5B,EAASU,eAAe0L,QAAQ,MAAOD,ID8B1DE,CAAc1K,EAAWwK,GAAI1F,MAAK,SAAC3E,GAAD,OAAcgK,EAAchK,EAASjE,WAElF,CAAC8D,IAGC0G,EAAShK,uBACX,SAACwN,GACG,OC3BL,SAA0BlK,EAAsBkK,EAAsCL,EAAatM,GACtG,OAAOyC,EAAU4E,KAA8CvG,EAASc,kBAAmB+K,EAAY,CACnGL,OACAtM,SDwBWoN,CAAiB3K,EAAWkK,EAAYL,EAAMtM,GAAMuH,MAAK,SAAC3E,GAAD,OAC5D8J,EAAe9J,EAASjE,WAGhC,CAAC8D,EAAWzC,EAAMsM,IAGhBvB,EAAS5L,uBACX,SAACwN,GACG,OC3CL,SAA0BlK,EAAsBwK,EAAYN,GAC/D,OAAOlK,EAAUgH,IACb3I,EAASa,kBAAkBuL,QAAQ,MAAOD,GAC1CN,GDwCWU,CAAiB5K,EAAWkK,EAAWW,IAAKX,GAAYpF,MAAK,SAAC3E,GAAD,OAChE8J,EAAe9J,EAASjE,WAGhC,CAAC8D,IAGC8K,EAAqBpO,uBACvB,SAAC8N,GACG,OCtCL,SAA0BxK,EAAsBwK,EAAYX,EAAatM,GAC5E,OAAOyC,EAAUiH,OAAsB5I,EAASgB,kBAAkBoL,QAAQ,MAAOD,GAAK,CAAEX,OAAMtM,SDqC/EwN,CAAiB/K,EAAWwK,EAAIX,EAAMtM,GAAMuH,MAAK,SAAC3E,GAAD,OACpD8J,EAAe9J,EAASjE,WAGhC,CAAC8D,EAAWzC,EAAMsM,IAGhBmB,EAAUtO,uBACZ,SAACuO,GACG,OC3CL,SAA4BjL,EAAsBgL,EAA2BnB,EAAatM,GAC7F,OAAOyC,EAAUgH,IAAqC3I,EAASe,mBAAoB4L,EAAS,CACxFnB,OAAMtM,SDyCK2N,CAAmBlL,EAAWiL,EAAOpB,EAAMtM,GAAMuH,MAAK,SAAC3E,GAAD,OACzD8J,EAAe9J,EAASjE,WAGhC,CAAC8D,EAAWzC,EAAMsM,IAQtB,OALAZ,qBAAU,WACNmB,IACAE,MACD,CAACF,EAAUE,IAEP,CACHR,kBACAE,cACAE,aACAQ,cAAezK,EACf0K,iBAAkBjE,EAClBkE,iBAAkBtC,EAClByC,iBAAkBD,EAClBK,kBAAmBH,GEnGpB,SAASI,GAAYvB,GAGzB,IAAD,EAC0BxF,mBAA2B,IADrD,mBACSgH,EADT,KACeC,EADf,KAGQtL,EAAYgI,mBAAQ,kBAAM,IAAI3B,KAAa,IAC3C4B,EAAcf,aAAagB,QAAQ,SACzClI,EAAU+E,SAASqC,KAAKe,MAAMF,IAE9B,IAAMqC,EAAU5N,uBAAY,WACxB,OCAD,SAAuBsD,EAAsB6J,GAChD,OAAO7J,EAAUC,IAAsB5B,EAASkB,cAAe,CAACsK,SDDrD0B,CAAcvL,EAAW6J,GAAM/E,MAAK,SAAC3E,GAAD,OAAcmL,EAAQnL,EAASjE,WAC3E,CAAC8D,EAAW6J,IAMf,OAJAZ,qBAAU,WACNqB,MACD,CAACA,IAEG,CAACkB,MAAOH,EAAMI,SAAUnB,GEb5B,SAASoB,GAAQC,GAMtB,wDAAC,IAAD,EAC0BtH,wBAA4BG,GADtD,mBACSoH,EADT,KACeC,EADf,OAEsCxH,wBAAkCG,GAFxE,mBAESsH,EAFT,KAEqBC,EAFrB,OAGkC1H,mBAAwB,IAH1D,mBAGS2H,EAHT,KAGmBC,EAHnB,KAKQjM,EAAYgI,mBAAQ,kBAAM,IAAI3B,KAAa,IAC3C4B,EAAcf,aAAagB,QAAQ,SACzClI,EAAU+E,SAASqC,KAAKe,MAAMF,IAE9B,IAAMiE,EAAUxP,uBAAY,WACxB,ODFD,SAAmBsD,EAAsBwK,GAC5C,OAAOxK,EAAUC,IAAW5B,EAASmB,SAASiL,QAAQ,MAAOD,ICClD2B,CAAUnM,EAAW2L,GAAQ7G,MAAK,SAAC3E,GAAD,OAAc0L,EAAQ1L,EAASjE,WACzE,CAACyP,EAAQ3L,IAENoM,EAAc1P,uBAAY,WAC5B,ODlBD,SAA6BsD,GAChC,OAAOA,EAAUC,IAAmB5B,EAASoB,mBCiBlC4M,CAAoBrM,GAAW8E,MAAK,SAAC3E,GAAD,OAAc8L,EAAY9L,EAASjE,WAC/E,CAAC8D,IAEEsM,EAAY5P,uBAAY,YDL3B,SAAyBsD,EAAsBwK,GAClD,OAAOxK,EAAUC,IAAiB5B,EAASqB,gBAAgB+K,QAAQ,MAAOD,KCKtE+B,CAAgBvM,EAAW2L,GAAQ7G,MAAK,SAAC3E,GAAD,OAAc4L,EAAc5L,EAASjE,WAC9E,CAAC8D,EAAW2L,IAETrD,EAAS5L,uBAAY,SAACR,GACxB,ODND,SAAoB8D,EAAsBwK,EAAYtO,GACzD,OAAO8D,EAAUgH,IAA2B3I,EAASmB,SAASiL,QAAQ,MAAOD,GAAKtO,GCKvEsQ,CAAWxM,EAAW2L,EAAQzP,GAAM4I,MAAK,SAAC3E,GAAD,OAAc0L,EAAQ1L,EAASjE,WAChF,CAAC8D,EAAW2L,IAUf,OARA1C,qBAAU,WACF0C,IACAS,IACAF,IACAI,OAEL,CAACJ,EAASP,EAAQS,EAAaE,IAE3B,CAACV,OAAMM,UAASF,WAAUF,aAAYU,WAAYlE,GC5CtD,SAASmE,KAIb,IAHC5C,EAGF,uDAHgB,KAIR7J,EAAYgI,mBAAQ,kBAAM,IAAI3B,KAAa,IAC3C4B,EAAcf,aAAagB,QAAQ,SAUzC,OATAlI,EAAU+E,SAASqC,KAAKe,MAAMF,IASvB,CAAEyE,WAPMhQ,uBACX,SAACR,GACG,OFIL,SAAoB8D,EAAsB9D,EAA0B2N,GACvE,OAAO7J,EAAU4E,KAA8CvG,EAASiB,YAAapD,EAAM,CAAC2N,SEL7E6C,CAAW1M,EAAW9D,EAAM2N,KAEvC,CAAC7J,EAAW6J,K,2iCCYpB,IAAM/M,GAAS,CACXoJ,KAAMyG,YAAF,MAeJ/M,MAAO+M,YAAF,MAKLC,MAAOD,YAAF,MAKLE,KAAMF,YAAF,OAQKG,GAAiB,SAAC7Q,GAAiC,IAExDiO,EAQAjO,EARAiO,WACA6C,EAOA9Q,EAPA8Q,mBACAC,EAMA/Q,EANA+Q,SACAC,EAKAhR,EALAgR,OACAC,EAIAjR,EAJAiR,eACAC,EAGAlR,EAHAkR,gBACAC,EAEAnR,EAFAmR,eACAC,EACApR,EADAoR,SA+BJ,OACI,oCACI,kBAACC,GAAA,EAAD,eAAOvP,UAAWjB,GAAOoJ,KAAMqH,IAAKF,GAAcD,GAC9C,wBAASD,EACL,kBAACK,GAAA,EAAD,CAAYzP,UAAWjB,GAAO+P,MAC1B,kBAACY,GAAA,EAAD,QAGR,kBAACjI,EAAA,EAAD,CAAYzH,UAAWjB,GAAO8C,OAAQsK,EAAWtK,OACjD,yBAAK7B,UAAWjB,GAAO8P,OACnB,kBAACY,GAAA,EAAD,CAAYzP,UAAWjB,GAAO+P,KAAMhH,QAtCrB,WACtBkH,GAGLA,EAAmB7C,KAmCFA,EAAWwD,UAAY,kBAACC,GAAA,EAAD,MAAiB,kBAACC,GAAA,EAAD,OAE7C,kBAACJ,GAAA,EAAD,CAAYzP,UAAWjB,GAAO+P,KAAMhH,QAlCxB,WACnBoH,GAGLA,EAAO/C,EAAWW,OA+BF,kBAACgD,GAAA,EAAD,OAEJ,kBAACL,GAAA,EAAD,CAAYzP,UAAWjB,GAAO+P,KAAMhH,QA9B/B,WACZmH,GAGLA,EAAS9C,EAAWW,OA2BJ,kBAACiD,GAAA,EAAD,OAEH5D,EAAW6D,UACR,kBAACP,GAAA,EAAD,CAAYzP,UAAWjB,GAAO+P,KAAMhH,QA3B7B,WAClBqH,GAGLA,EAAehD,EAAWW,OAwBN,kBAACmD,GAAA,EAAD,W,irBCjH5B,IAAMlR,GAAS,CACXmR,MAAOtB,YAAF,MAGLuB,OAAQvB,YAAF,MAQN/M,MAAO+M,YAAF,MAKLwB,MAAOxB,YAAF,OAKIyB,GAAyB,SAACnS,GAAW,IACtCmN,EAAmCnN,EAAnCmN,KAAMxJ,EAA6B3D,EAA7B2D,MAAOyO,EAAsBpS,EAAtBoS,QAASC,EAAarS,EAAbqS,SAE9B,OACI,kBAACC,GAAA,EAAD,CAAQnF,KAAMA,EAAMiF,QAASA,EAAS/Q,QAAS,CAAC2F,MAAOnG,GAAOmR,QAC1D,kBAACO,GAAA,EAAD,CAAazQ,UAAWjB,GAAOoR,OAAQO,mBAAiB,GACpD,kBAACjJ,EAAA,EAAD,CAAY5H,QAAS,KAAMG,UAAWjB,GAAO8C,OAAQA,GACrD,kBAAC4N,GAAA,EAAD,CAAY3H,QAASwI,EAAStQ,UAAWjB,GAAOqR,OAC5C,kBAACO,GAAA,EAAD,QAGPJ,I,uUClBb,IAAMxR,GAAS,CACXC,aAAcC,IAAF,MAKZC,UAAWD,IAAF,OAKA2R,GAAS,SAAC1S,GAAyB,IACpCkB,EAAkClB,EAAlCkB,KAAMyR,EAA4B3S,EAA5B2S,QAASxR,EAAmBnB,EAAnBmB,MAAOE,EAAYrB,EAAZqB,QACxBuR,EAAaC,IAAMC,OAAyB,MAFP,EAIP1K,mBAAS,GAJF,mBAIpC2K,EAJoC,KAIxBC,EAJwB,KAS3C,OAJAhG,qBAAU,WACNgG,EAAcJ,EAAWK,QAASC,eACnC,IAGC,kBAAC,IAAD,CAAOhS,KAAMA,IACR,gBAAGO,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,kBAACyR,GAAA,EAAD,CAAaxR,QAAS,WAAYC,WAAS,EAACP,QAASA,EAASD,QAASM,EAAKN,OACxE,kBAACgS,GAAA,EAAD,CAAY9B,IAAKsB,GAAazR,GAC9B,kBAAC,KAAD,eAAgB4R,WAAYA,GAAgBtR,GACvCkR,EAAQU,KAAI,SAACC,GAAD,OACT,kBAACC,GAAA,EAAD,CAAU/H,MAAO8H,EAAO9H,MAAOC,IAAK6H,EAAO9H,OACtC8H,EAAOnS,WAInBO,EAAKN,OACF,kBAACoS,GAAA,EAAD,CAAgB1R,UAAWjB,GAAOC,cAC9B,kBAAC,IAAD,MACA,0BAAMgB,UAAWjB,GAAOG,WAAYU,EAAKN,a,8BClDxDqS,GAAc,SAACzT,GAA8B,IAC9CkB,EAA4ClB,EAA5CkB,KAD6C,EACDlB,EAAtCyJ,aADuC,MAC/B,UAD+B,EACpBtI,EAAmBnB,EAAnBmB,MAAOE,EAAYrB,EAAZqB,QAExC,OACI,kBAAC,IAAD,CAAOH,KAAMA,IACR,gBAAGO,EAAH,EAAGA,MAAH,EAAUC,KAAV,OACG,kBAACgS,GAAA,EAAD,CACIrS,QAASA,EACTsS,QAAS,kBAACC,GAAA,EAAD,eAAQnK,MAAOA,EAAOoK,QAASpS,EAAM+J,OAAW/J,IACzDN,MAAOA,Q,yXCa3B,IAAMN,GAAS,CACXiT,QAASpD,YAAF,MAGPjP,MAAOiP,YAAF,OAMHqD,GAAmBxN,WAAaC,MAAM,CACxC7C,MAAO4C,WAAaG,SAAS,+KAC7BsN,iBAAkBzN,WAAaG,SAAS,+KACxC9C,KAAM2C,WAAaG,SAAS,iLAGnBuN,GAAkB,SAACjU,GAAgC,IAExDmN,EAOAnN,EAPAmN,KACA+G,EAMAlU,EANAkU,iBACA9B,EAKApS,EALAoS,QACAlS,EAIAF,EAJAE,SACA+N,EAGAjO,EAHAiO,WANuD,EASvDjO,EAFA2D,aAPuD,MAO/C,0GAP+C,EAQvDwQ,EACAnU,EADAmU,WAUJ,OACI,kBAAC,GAAD,CAAOxQ,MAAOA,EAAOwJ,KAAMA,EAAMiF,QAASA,GACtC,kBAAC,EAAD,CACIlS,SAVS,SAACD,GACbC,GAGLA,EAASD,IAODA,KAAMmU,GAAUnG,GAChB9N,iBAAkB4T,GAClBxT,kBAAkB,EAClBD,gBAAgB,EAChBF,OAAQ,SAACuH,GAAD,OACJ,yBAAK7F,UAAWjB,GAAOiT,SACnB,kBAAC,EAAD,CACI5S,KAAM,QACNC,MAAO,mDACPE,QAAS,CAAEW,KAAMnB,GAAOY,SAE5B,kBAAC,GAAD,CACIP,KAAM,mBACNC,MAAO,0DACPwR,QAASuB,EAAiBb,KAAI,SAACpJ,GAAD,MAAW,CACrCuB,MAAOvB,EAAK2E,IACZzN,MAAO8I,EAAKtG,UAEhBtC,QAAS,CAAEW,KAAMnB,GAAOY,SAE5B,kBAAC,EAAD,CAAWP,KAAM,OAAQC,MAAO,uCAAUE,QAAS,CAAEW,KAAMnB,GAAOY,UAChE0S,GACE,kBAAC,GAAD,CACIjT,KAAM,WACNC,MAAO,kFACPE,QAAS,CAAEW,KAAMnB,GAAOY,SAGhC,yBAAKK,UAAW4O,YAAF,OACV,kBAAC/G,EAAA,EAAD,CACIhI,QAAQ,YACR8H,MAAM,UACN4K,UAAW,kBAACC,GAAA,EAAD,MACX1K,QAAO,OAAEjC,QAAF,IAAEA,OAAF,EAAEA,EAAMkC,WACfC,WAAU,OAACnC,QAAD,IAACA,OAAD,EAACA,EAAM4M,UAAWC,kBAAO,OAAC7M,QAAD,IAACA,OAAD,EAACA,EAAM8M,OAAP,OAAe9M,QAAf,IAAeA,OAAf,EAAeA,EAAMjH,gBAL5D,iEAiBrB,SAAS0T,GAAUnG,GACtB,OAAKA,EAGE,gBAAKA,EAAZ,CAAwB+F,iBAAkB/F,EAAWyG,eAAe9F,MAFzD,CAAEkD,UAAU,G,6OC5G3B,IAAMjR,GAAS,CACX8T,OAAQjE,YAAF,MAGNkE,QAASlE,YAAF,OAKEmE,GAAuC,SAAC7U,GAAW,IAExDoS,EAMApS,EANAoS,QACAjF,EAKAnN,EALAmN,KACAxJ,EAIA3D,EAJA2D,MACAzD,EAGAF,EAHAE,SALuD,EAQvDF,EAFA8U,mBANuD,MAMzC,uCANyC,IAQvD9U,EADA+U,mBAPuD,MAOzC,eAPyC,EAS3D,OACI,kBAAC,GAAD,CAAO5H,KAAMA,EAAMxJ,MAAOA,EAAOyO,QAASA,GACtC,kBAAC4C,GAAA,EAAD,CAAelT,UAAWjB,GAAO+T,SAC7B,kBAACjL,EAAA,EAAD,CACIhI,QAAQ,WACR8H,MAAM,YACNG,QAASwI,EACTtQ,UAAWjB,GAAO8T,QAEjBG,GAEL,kBAACnL,EAAA,EAAD,CAAQhI,QAAQ,WAAW8H,MAAO,UAAWG,QAAS1J,GACjD6U,M,4kBCNrB,IAAMlU,GAAS,CACXmJ,UAAW0G,YAAF,MAGTuE,QAASvE,YAAF,MAGPoD,QAASpD,YAAF,MAGP2B,SAAU3B,YAAF,MAIRwE,cAAexE,YAAF,OAMJyE,GAAkB,SAAlBA,EAAmBnV,GAAkC,IAAD,EAEzDoV,EAWApV,EAXAoV,kBAFyD,EAazDpV,EAVA6N,uBAHyD,MAGvC,GAHuC,EAIzDa,EASA1O,EATA0O,iBACAI,EAQA9O,EARA8O,iBACAL,EAOAzO,EAPAyO,cACAE,EAMA3O,EANA2O,iBACAf,EAKA5N,EALA4N,KACAuG,EAIAnU,EAJAmU,WACAjF,EAGAlP,EAHAkP,kBAVyD,EAazDlP,EAFA+N,mBAXyD,MAW3C,GAX2C,IAazD/N,EADAsB,YAZyD,MAYlD,aAZkD,IAczB8G,oBAAS,GAdgB,mBActDiN,EAdsD,KAc1CC,EAd0C,OAe7BlN,oBAAS,GAfoB,mBAetDmN,EAfsD,KAe5CC,EAf4C,OAgBPpN,wBAA6BG,GAhBtB,mBAgBtDkN,EAhBsD,KAgBjCC,EAhBiC,OAiB7BtN,wBAA6BG,GAjBA,mBAiBtDoN,EAjBsD,KAiB5CC,EAjB4C,OAkBzBxN,oBAAS,GAlBgB,mBAkBtDyN,EAlBsD,KAkB1CC,EAlB0C,OAmBf1N,oBAAS,GAnBM,mBAmBtD2N,EAnBsD,KAmBrCC,EAnBqC,OAoB7B5N,mBAAwB,IApBK,mBAoBtDiK,EApBsD,KAoB5C4D,EApB4C,KAsC7D,SAASC,IACLZ,GAAc,GAGlB,SAASa,IACLX,GAAY,GAGhB,SAASY,IACLZ,GAAY,GAOhB,SAASa,IACLP,GAAc,GAjClB9I,qBAAU,WACN,IAAMsJ,EAAavI,EAAYwI,QAAO,SAACtM,GAAD,OAAUA,EAAK0L,WAAaA,KAClEM,EAAYK,GAEZ,IAAME,EAAMzI,EAAY0I,MAAK,SAACxM,GAAD,OAAUA,EAAK2E,MAAQ+G,KAChDa,IACKA,EAAI1E,UACL4E,QAGT,CAAC3I,EAAa4H,IA0BjB,IAAM1V,EAAO8N,EACRwI,QAAO,SAACtM,GAAD,OAAWA,EAAK0L,SAAW1L,EAAK0L,WAAa3V,EAAM2V,UAAY1L,EAAK0L,YAC3EgB,MAAK,SAACC,EAAMC,GAAP,OAAkBD,EAAKE,SAAWD,EAAMC,SAAW,GAAK,KAqB5DhG,EAAqB,SAAC7C,GACnBU,IAGLV,EAAWwD,WAAaxD,EAAWwD,UACnC9C,EAAiB,gBAAKV,MAGpB8I,GAAkB,SAACxI,GAChBE,GAGLA,EAAcF,GAAI1F,KAAKsN,IAGrBtH,GAAqB,SAACN,GACxBmH,EAAuBnH,GA9CvBuH,GAAc,IAyEZ7E,GAAiB,SAAC1C,GACpBqH,EAAYrH,GACZ,IAAMyI,EAAqBjJ,EAAYwI,QAAO,SAACtM,GAAD,OAAUA,EAAK0L,WAAapH,KAC1E0H,EAAYe,GACZhB,GAAmB,IAGjBU,GAAkB,WACpBV,GAAmB,GACnBJ,OAAYrN,GACZ0N,EAAY,KAUhB,OACI,yBAAKnU,UAAWjB,GAAOmJ,WACnB,yBAAKlI,UAAWjB,GAAOoU,SACnB,kBAAC,KAAD,CAAiBgC,UAVX,SAACpR,GACf,GAAKA,EAAOqR,aAAgBhI,EAA5B,CAGA,IAAMX,EAAKtO,EAAK4F,EAAOsR,OAAOC,OAAOxI,IACrCM,EAAkB,CAACN,IAAKL,EAAIuI,SAAUjR,EAAOqR,YAAYE,MAAOzB,SAAU3V,EAAM2V,cAMpE,kBAAC,KAAD,CAAW0B,YAAa,aAAcC,UAAW,aAC5C,SAACC,GAAD,OACG,uCACIzV,UAAWjB,GAAOiT,QAClBxC,IAAKiG,EAASnG,UACVmG,EAASC,gBAEZvX,EAAKoT,KAAI,SAACpJ,EAAMmN,GAAP,OACN,kBAAC,KAAD,CAAWA,MAAOA,EAAOK,YAAaxN,EAAK2E,IAAKnD,IAAKxB,EAAK2E,MACrD,SAAC2I,GAAD,OACG,kBAAC,GAAD,CACInG,SAAUmG,EAASnG,SACnBD,eAAgBoG,EAASpG,eACzBD,gBAAiBqG,EAASrG,gBAC1BjD,WAAYhE,EACZwB,IAAKxB,EAAK2E,IACVkC,mBAAoBA,EACpBE,OAAQ+F,GACRhG,SAAUlC,GACVoC,eAAgBA,WAK/BsG,EAASG,iBAK1B,kBAACC,GAAA,EAAD,CAAKlO,MAAM,UAAUmO,aAAW,MAAMhO,QA/IlD,WACI0L,GAAc,KA+IF,kBAACuC,GAAA,EAAD,OAEJ,kBAAC,GAAD,CACI1K,KAAMkI,EACNnB,iBAAkBrG,EAClBuE,QAAS8D,EACThW,SA1HW,SAAC+N,GACxB,GAAKS,EAAL,CAGA,IAAMgG,EACF7G,EAAgB4I,MAAK,SAACxM,GAAD,OAAUA,EAAK2E,MAAQX,EAAW+F,qBACvDnG,EAAgB,GACd2I,EAA6B,gBAC5BvI,EAD4B,CAE/ByG,iBACAiB,SAAU3V,EAAM2V,SAChBlE,WAAW,EACX7D,OACAkJ,SAAU7W,EAAK8E,OACfzD,SAEJoN,EAAiB8H,GAAK3N,KAAKqN,KA2Gf/B,WAAYA,IAEhB,kBAAC,GAAD,CACIlG,WAAYmH,EACZjI,KAAMoI,EACNrB,iBAAkBrG,EAClBuE,QAASgE,EACTlW,SA3FW,SAACD,GACxB,GAAKmV,GAAsBzG,EAA3B,CAGA,IAAMrN,EAAOuM,EAAgB4I,MAAK,SAACxM,GAAD,OAAUA,EAAK2E,MAAQ3O,EAAK+T,oBAC9DoB,EAAkBV,eAAiBpT,GAAQuM,EAAgB,GAC3Dc,EAAiB,gBAAKyG,EAAN,GAA4BnV,EAA5B,CAAkCyU,eAAgBpT,KAAQuH,KAAKuN,KAsFnEzS,MAAO,wIACPwQ,WAAYA,IAEhB,kBAAC,GAAD,CACIhH,KAAM0I,EACNzD,QAASiE,EACT1S,MAAK,uHACDoK,EAAY0I,MAAK,SAACxM,GAAD,OAAUA,EAAK2E,MAAQ6G,YADvC,aACD,EAA8D9R,MAD7D,MAGLoR,YAAa,6CACb7U,SA7FM,WACb4O,GAAqB2G,GAG1B3G,EAAiB2G,GAAqB5M,MAAK,WACvCwN,IACIZ,IAAwBE,IACxBK,GAAmB,GACnBJ,OAAYrN,GACZ0N,EAAY,YAuFfF,GACG,yBAAKjU,UAAWjB,GAAOwR,UACnB,kBAAC8C,EAAD,CACIpH,YAAasE,EACb+C,kBAAmBA,EACnBvH,gBAAiBA,EACjBD,KAAMA,EACN+H,SAAUA,EACV7G,iBAAkBA,EAClBJ,iBAAkBA,EAClBD,cAAeA,EACfE,iBAAkBA,EAClBwF,YAAU,EACVjF,kBAAmBA,EACnB5N,KAAMA,IAEV,kBAACiQ,GAAA,EAAD,CAAYzP,UAAWjB,GAAOqU,cAAetL,QAAS8M,IAClD,kBAACjE,GAAA,EAAD,UC7QXqF,GAAoB,SAAC9X,GAAoC,IAC1D4N,EAAe5N,EAAf4N,KAAMtM,EAAStB,EAATsB,KADmD,EAW7DqM,GAAcC,EAAMtM,GARpByM,EAH6D,EAG7DA,YACAE,EAJ6D,EAI7DA,WACAJ,EAL6D,EAK7DA,gBACAqB,EAN6D,EAM7DA,kBACAJ,EAP6D,EAO7DA,iBACAH,EAR6D,EAQ7DA,iBACAD,EAT6D,EAS7DA,iBACAD,EAV6D,EAU7DA,cAGJ,OACI,kBAAC,GAAD,CACIb,KAAMA,EACNG,YAAaA,EACbqH,kBAAmBnH,EACnBJ,gBAAiBA,EACjBiB,iBAAkBA,EAClBJ,iBAAkBA,EAClBD,cAAeA,EACfE,iBAAkBA,EAClBO,kBAAmBA,EACnB5N,KAAMA,K,wGCzBlB,IAAMT,GAAS,CACXoU,QAASvE,YAAF,OAKEqH,GAAa,SAAC/X,GAA6B,IAC5CgY,EAAiBhY,EAAjBgY,aAERhL,qBAAU,kBAAMgL,EAAa,4DAAc,CAACA,IAHO,MAKzB5P,mBAAS,GALgB,mBAK5CoD,EAL4C,KAKrCyM,EALqC,KAWnD,OACI,6BACI,kBAAC5G,GAAA,EAAD,KACI,kBAAC6G,GAAA,EAAD,CACIvW,QAAQ,YACR6J,MAAOA,EACP2M,SAVK,SAAC3K,EAA8B4K,GAChDH,EAASG,IAUGC,eAAe,YACfC,UAAU,aAEV,kBAACC,GAAA,EAAD,CAAKpX,MAAM,wEACX,kBAACoX,GAAA,EAAD,CAAKpX,MAAM,4FAGnB,yBAAKW,UAAWjB,GAAOoU,SACR,IAAVzJ,GAAe,kBAAC,GAAD,CAAmBoC,KAAM,KAAMtM,KAAM,eAC1C,IAAVkK,GAAe,kBAAC,GAAD,CAAmBoC,KAAM,KAAMtM,KAAM,kB,wGCjCrE,IAAMT,GAAS,CACXoU,QAASvE,YAAF,OAKE8H,GAAS,SAACxY,GAAyB,IACpCgY,EAAiBhY,EAAjBgY,aAERhL,qBAAU,kBAAMgL,EAAa,oCAAU,CAACA,IAHG,MAKjB5P,mBAAS,GALQ,mBAKpCoD,EALoC,KAK7ByM,EAL6B,KAW3C,OACI,6BACI,kBAAC5G,GAAA,EAAD,KACI,kBAAC6G,GAAA,EAAD,CACIvW,QAAQ,YACR6J,MAAOA,EACP2M,SAVK,SAAC3K,EAA8B4K,GAChDH,EAASG,IAUGC,eAAe,YACfC,UAAU,aAEV,kBAACC,GAAA,EAAD,CAAKpX,MAAM,wEACX,kBAACoX,GAAA,EAAD,CAAKpX,MAAM,4FAGnB,yBAAKW,UAAWjB,GAAOoU,SACR,IAAVzJ,GACG,kBAAC,GAAD,CACIoC,KAAM,KACNtM,KAAM,WAGH,IAAVkK,GACG,kBAAC,GAAD,CACIoC,KAAM,KACNtM,KAAM,c,ihBC5C9B,IAAMT,GAAS,CACX4X,OAAQ1X,IAAF,MAGN2X,YAAa3X,IAAF,MAGX4X,QAAS5X,IAAF,MAIP6X,YAAa7X,IAAF,OAKF8X,GAAU,WACnB,OACI,kBAACC,GAAA,EAAD,CACInX,QAAS,YACToX,OAAQ,OACRjX,UAAWjB,GAAO4X,OAClBpX,QAAS,CACL2F,MAAOnG,GAAO6X,cAGlB,yBAAK5W,UAAWjB,GAAO8X,UACvB,kBAACK,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,KACKvV,EAAa2P,KAAI,SAACpJ,EAAMwB,GAAP,OACd,kBAACyN,GAAA,EAAD,CACIvE,QAAM,EACNlJ,IAAKA,EACL7B,QAAS,kBAAM9J,IAAwBiJ,KAAKkB,EAAKrG,QAEjD,kBAACuV,GAAA,EAAD,CAAcC,QAASnP,EAAKtG,aAIxC,kBAACqV,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,KACKpV,EAAkBwP,KAAI,SAACpJ,EAAMwB,GAAP,OACnB,kBAACyN,GAAA,EAAD,CACIvE,QAAM,EACNlJ,IAAKA,EACL7B,QAAS,kBAAM9J,IAAwBiJ,KAAKkB,EAAKrG,QAEjD,kBAACuV,GAAA,EAAD,CAAcC,QAASnP,EAAKtG,e,UCzCvC0V,GAAO,SAACrZ,GAAuB,IAChC+Y,EAAwC/Y,EAAxC+Y,OAAQ3G,EAAgCpS,EAAhCoS,QAASjF,EAAuBnN,EAAvBmN,KADc,EACSnN,EAAjB2S,eADQ,MACE,GADF,EAGvC,OACI,kBAAC,KAAD,CACIxF,KAAMA,EACNmM,SAAUP,EACV3G,QAASA,EACTmH,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhBC,aAAW,EACXC,gBAAiB,CACbH,SAAU,MACVC,WAAY,UAGf9G,EAAQU,KAAI,SAACpJ,EAAMmN,GAAP,OACT,kBAAC7D,GAAA,EAAD,CAAU3J,QAASK,EAAK2P,QAASnO,IAAK2L,GACjCnN,EAAKuB,Y,ulCCP1B,IAAM3K,GAAS,CACXmB,KAAMjB,IAAF,MAGJ8Y,OAAQ9Y,IAAF,MAIN+S,QAAS/S,IAAF,MASP+Y,WAAY/Y,IAAF,MAGV0X,OAAQ1X,IAAF,MAGN2X,YAAa3X,IAAF,MAGX4X,QAAS5X,IAAF,MAIP6X,YAAa7X,IAAF,OAKFgZ,GAA2B,SAAC/Z,GAAW,IACxC2D,EAAoC3D,EAApC2D,MAAO0O,EAA6BrS,EAA7BqS,SAAUxG,EAAmB7L,EAAnB6L,KAAMmO,EAAaha,EAAbga,SADgB,EAEf5R,mBAA6B,MAFd,mBAExCkR,EAFwC,KAE9BW,EAF8B,KAGzCC,EAAaC,QAAQb,GAHoB,EAIKlR,oBAAS,GAJd,mBAIxCgS,EAJwC,KAIpBC,EAJoB,KAc/C,IAIMC,EAAkB,WACpBL,EAAY,OAehB,OACI,yBAAKnY,UAAWjB,GAAOmB,MACnB,kBAAC,IAAD,KACI,+BAAQ2B,IAEZ,kBAAC4W,GAAA,EAAD,CAAQzD,SAAU,QAAShV,UAAWjB,GAAOgZ,OAAQpQ,MAAO,WACxD,kBAAC+Q,GAAA,EAAD,KACI,kBAACjR,EAAA,EAAD,CAAY5H,QAAQ,KAAK8Y,QAAM,GAC1B9W,GAEL,kBAAC+W,GAAA,EAAD,CAAS/W,OAAW,OAAJkI,QAAI,IAAJA,OAAA,EAAAA,EAAM8O,SAAN,OAAe9O,QAAf,IAAeA,OAAf,EAAeA,EAAMpF,QAAS,IAC1C,kBAAC8K,GAAA,EAAD,CACI3H,QAhCM,SAAC4D,GAC3ByM,EAAYzM,EAAMoN,gBAgCEnR,MAAO,UACP3H,UAAWjB,GAAOiZ,aAEb,OAAJjO,QAAI,IAAJA,OAAA,EAAAA,EAAMvE,QAAS,kBAAC,IAAD,CAAQ9C,IAAG,OAAEqH,QAAF,IAAEA,OAAF,EAAEA,EAAMvE,SAAa,kBAACuT,GAAA,EAAD,QAGxD,kBAAC,GAAD,CACI9B,OAAQO,EACRnM,KAAM+M,EACN9H,QAASkI,EACT3H,QAAS,CACL,CACInH,MAAO,6CACPoO,QA/BR,WAChB9Z,IAAwBiJ,KAAK,kBAC7BuR,MA+BoB,CACI9O,MAAO,iCACPoO,QA1D5B,WACIS,GAAsB,UA+DlB,kBAAC,GAAD,MACA,yBAAKvY,UAAWjB,GAAOiT,SAAUzB,GACjC,kBAAC,GAAD,CACI1O,MAAO,mKACPoR,YAAa,iCACb5H,KAAMiN,EACNhI,QAlEZ,WACIiI,GAAsB,IAkEdna,SAvDG,WACXoa,IACIN,GACAA,S,sNC7EZ,IAAMnZ,GAAS,CACXia,KAAMpK,YAAF,MAGJoD,QAASpD,YAAF,OAKEqK,GAAuB,SAAC/a,GAAW,IACpC2D,EAAoB3D,EAApB2D,MAAO0O,EAAarS,EAAbqS,SACf,OACI,kBAAChB,GAAA,EAAD,CAAOvP,UAAWjB,GAAOia,KAAME,UAAW,GACtC,kBAACzR,EAAA,EAAD,CAAY5H,QAAS,MAAOgC,GAC5B,yBAAK7B,UAAWjB,GAAOiT,SAAUzB,K,8JCFtC,IAAM4I,GAAqC,SAAC,GAAuC,IAArC7N,EAAoC,EAApCA,QAAShM,EAA2B,EAA3BA,MAAO+L,EAAoB,EAApBA,KAAMiF,EAAc,EAAdA,QACvE,OACI,aAAC,KAAD,CACImH,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhBtM,KAAMA,EACN+N,iBAAkB,IAClB9I,QAASA,GAET,aAAC+I,GAAA,EAAD,CACIzK,IAAKA,aAAI,CACL0K,WAAYha,EAASia,KAAI,KAAOC,KAAM,KACtCC,UAAU,aAAD,OAAena,EAAQia,KAAI,KAAOC,KAAM,QAErDlO,QACI,qBACIsD,IAAK,CACDvJ,QAAS,OACTE,WAAY,WAGfjG,EACG,aAAC,KAAD,MAEA,aAACoa,GAAA,EAAD,MAEJ,qBAAM9K,IAAKA,aAAF,OAA4BtD,IAG7CqO,OAAQ,CACJ,aAAClK,GAAA,EAAD,CAAY9F,IAAI,QAAQhC,MAAM,UAAUG,QAASwI,GAC7C,aAACK,GAAA,EAAD,Y,gcAQxBwI,GAASS,YAAc,WC5ChB,IAAM7a,GAAS,CAClBoU,QAASvE,YAAF,MAGPiL,WAAYjL,YAAF,MAGVkL,YAAalL,YAAF,MAGXjP,MAAOiP,YAAF,OAmBTnK,YAAcA,SAAY,WAd1B,SAAiB+K,EAAUuK,GACvB,OAAOtV,WAAauV,KAAK,CACrB5a,KAAM,UACN6a,WAAW,EACX3O,QAASyO,EACTjR,OAAQ,CACJoR,UAAW1K,EAAI2K,MAEnBH,KAAM,SAAStQ,GACX,OAAOA,IAAUX,KAAKtF,QAAQ+L,SAO1C,IAAMyC,GAAmBxN,WAAaC,MAAM,CACxC0V,gBAAiB3V,WACZK,IAAI,EAAG,kOACPF,SAAS,+KACdyV,YAAa5V,WACR6V,QAAQ7V,MAAQ,kBAAmB,oPACnCK,IAAI,EAAG,kOACPF,SAAS,+KACd2V,eAAgB9V,WACX6V,QAAQ7V,MAAQ,eAAgB,oPAChCK,IAAI,EAAG,kOACPF,SAAS,iLAGL4V,GAAiB,SAACtc,GAAiC,IACpDoB,EAAoBpB,EAApBoB,MAAOlB,EAAaF,EAAbE,SAD4C,EAEnBkI,oBAAS,GAFU,mBAEpDmU,EAFoD,KAEtCC,EAFsC,KAY3D,OACI,oCACI,yBAAK1a,UAAWjB,GAAOoU,SACnB,kBAAC,IAAD,CACItT,QAAQ,WACRC,WAAS,EACTT,MAAO,uCACPG,KAAM,WACNkK,MAAO,WACP1B,UAAQ,IAEZ,kBAACyH,GAAA,EAAD,CAAY9H,MAAO,UAAWG,QAnB1C,WACI4S,GAAgB,KAmBJ,kBAAC5K,GAAA,EAAD,QAGR,kBAAC,GAAD,CAAOzE,KAAMoP,EAAc5Y,MAAO,kFAAkByO,QAnB5D,WACIoK,GAAgB,KAmBR,kBAAC,EAAD,CACIrc,iBAAkB4T,GAClB7T,SAAUA,EACVE,OAAQ,SAACuH,GAAD,OACJ,yBAAK7F,UAAWjB,GAAO+a,aACnB,kBAAC,EAAD,CACI1a,KAAM,kBACNC,MAAO,kFACPE,QAAS,CAAEW,KAAMnB,GAAOY,OACxBH,KAAM,WACNF,QAASA,IAEb,kBAAC,EAAD,CACIF,KAAM,cACNC,MAAO,sEACPE,QAAS,CAAEW,KAAMnB,GAAOY,OACxBH,KAAM,WACNF,QAASA,IAEb,kBAAC,EAAD,CACIF,KAAM,iBACNC,MAAO,8FACPE,QAAS,CAAEW,KAAMnB,GAAOY,OACxBH,KAAM,WACNF,QAASA,IAEZA,GACG,kBAACmI,EAAA,EAAD,CACIE,MAAO,QACPC,MAAO,SACP5H,UAAWjB,GAAOY,OAEjBL,GAGT,kBAACuI,EAAA,EAAD,CACIhI,QAAQ,YACR8H,MAAM,UACN4K,UAAW,kBAACC,GAAA,EAAD,MACX1K,QAAO,OAAEjC,QAAF,IAAEA,OAAF,EAAEA,EAAMkC,WACfC,WAAU,OAACnC,QAAD,IAACA,OAAD,EAACA,EAAM4M,UALrB,iE,gYC3G5B,IAAMR,GAAmBxN,WAAaC,MAAM,CACxCC,MAAOF,WACFE,MAAM,uEACNC,SAAS,+KACdiU,MAAOpU,WACFG,SAAS,+KACTE,IAAI,EAAG,yLAGVvF,GAAU,CACZI,MAAOiP,YAAF,MAGL+L,aAAc/L,YAAF,MAIZgM,KAAMhM,YAAF,OAKKiM,GAAiB,SAAC3c,GAA6B,IAChD6L,EAA0B7L,EAA1B6L,KAAa3L,GAAaF,EAApBoB,MAAoBpB,EAAbE,UAErB,OACI,kBAAC,EAAD,CACID,KAAM4L,EACN3L,SAAUA,EACVC,iBAAkB4T,GAClB3T,OAAQ,SAACuH,GAAD,eACJ,oCACI,kBAAC,EAAD,CACIzG,KAAM,QACNC,MAAO,iCACPE,QAAS,CACLW,KAAMX,GAAQI,OAElBD,gBAAiB,CAAEob,UAAS,OAACjV,QAAD,IAACA,OAAD,YAACA,EAAM8M,cAAP,aAAC,EAAckG,UAE/C,yBAAK7Y,UAAW+a,KAAGxb,GAAQob,aAAcpb,GAAQI,QAC7C,kBAAC,EAAD,CACIP,KAAM,QACNC,MAAO,SACPK,gBAAiB,CACbob,UAAS,OAACjV,QAAD,IAACA,OAAD,YAACA,EAAM8M,cAAP,aAAC,EAAchO,UAGhC,kBAACiU,GAAA,EAAD,CACI/W,MACI,geAEJ7B,UAAWT,GAAQqb,MAEnB,kBAACnL,GAAA,EAAD,KACI,kBAACuL,GAAA,EAAD,CAAMrT,MAAO,eAIzB,kBAACE,EAAA,EAAD,CACIhI,QAAQ,YACR8H,MAAM,UACN4K,UAAW,kBAACC,GAAA,EAAD,MACX1K,QAAO,OAAEjC,QAAF,IAAEA,OAAF,EAAEA,EAAMkC,WACfC,SAAU0K,kBAAO,OAAC7M,QAAD,IAACA,OAAD,EAACA,EAAM8M,OAAP,OAAe9M,QAAf,IAAeA,OAAf,EAAeA,EAAMjH,gBAL1C,+D,wTCzEpB,IAAMqc,GAAUC,EAAQ,KAQlBnc,GAAS,CACXoU,QAASvE,YAAF,MAMPuM,MAAOvM,YAAF,OAMIwM,GAAS,SAACld,GAAyB,IACpC2K,EAAyB3K,EAAzB2K,IAAKzJ,EAAoBlB,EAApBkB,KAAMY,EAAc9B,EAAd8B,UACnB,OACI,yBAAKA,UAAW+a,KAAGhc,GAAOoU,QAASnT,IAC/B,yBAAK0C,IAAKmG,GAAOoS,GAASI,IAAKjc,EAAMY,UAAWjB,GAAOoc,U,okCCZnE,IAAMpc,GAAS,CACXoU,QAASvE,YAAF,MAOPC,MAAOD,YAAF,MAKLE,KAAMF,YAAF,MAMJpJ,OAAQoJ,YAAF,MAGNiE,OAAQjE,YAAF,MAGN0M,MAAO1M,YAAF,MAGL2M,SAAU3M,YAAF,MAIRtP,MAAOsP,YAAF,OAKI4M,GAAe,SAACtd,GAA+B,IAChD8M,EAA0C9M,EAA1C8M,eAAgByQ,EAA0Bvd,EAA1Bud,aAAcC,EAAYxd,EAAZwd,QADiB,EAErBpV,oBAAS,GAFY,mBAEhDqV,EAFgD,KAErCC,EAFqC,KAGjDC,EAAW7K,iBAAyB,MAHa,EC7CpD,SACHlI,GAQD,IAAD,EAC0BxC,wBAA2BG,GADrD,mBACS/C,EADT,KACeoY,EADf,OAEwBxV,wBAA6BG,GAFrD,mBAES/D,EAFT,KAEcqZ,EAFd,OAG4BzV,wBAA6BG,GAHzD,mBAGSnH,EAHT,KAGgB0c,EAHhB,KAuBQC,EAAW,SAAOvY,GAAP,gBAAAwY,EAAAC,OAAA,qDACTzY,EAAKjE,KAAOqJ,EAAOsT,aADV,gOAEkCtT,EAAOsT,YAAP,QAFlC,6CAAAF,EAAA,MAIK,IAAIG,SAAQ,SAAC5Y,GAAD,OAC1BD,EAAaC,EAASC,OALb,UAIPM,EAJO,SAOT8E,EAAOwT,UAAUC,QAAQvY,GAAO,GAPvB,yCAQF,mYARE,UAUTE,EAAmBR,KAAUM,EAVpB,yCAWF,0MAXE,qCAaNyC,GAbM,uCAsBjB,MAAO,CAAE/C,OAAMhB,MAAKpD,QAAOkd,SAxCV,SAAOC,GAAP,gBAAAP,EAAAC,OAAA,mEAAAD,EAAA,MACAD,EAASQ,IADT,8CAETT,EAFS,YAAAE,EAAA,MAEMD,EAASQ,IAFf,mEAKbT,OAASvV,IACH9C,EAAS,IAAIC,YACZ8Y,cAAcD,GACrBE,qBAAUhZ,EAAQ,WAAWiZ,WAAU,qBAAAV,EAAAC,OAAA,gDACnC,IACIJ,EAAOpY,EAAOI,QACd+X,EAAQzZ,EAAcsB,EAAOI,OAAkB0Y,EAAErd,OACnD,MAAOE,IAJ0B,wCAR1B,uCAwCoBud,WANlB,WACfd,OAAOtV,GACPqV,OAAQrV,GACRuV,OAASvV,IAGoCsV,UDLUe,CAAQ,CAC/DR,UAAW,CAAC,MAAO,MAAO,MAAO,MAAO,QACxCF,YAAa,UAFT1Z,EAJ+C,EAI/CA,IAAKgB,EAJ0C,EAI1CA,KAAMpE,EAJoC,EAIpCA,MAAOyc,EAJ6B,EAI7BA,OAAQc,EAJqB,EAIrBA,WAAYL,EAJS,EAITA,SAa9C,SAASO,IACLnB,GAAa,GATjB1Q,qBAAU,WACN6Q,EAAO7d,EAAMwE,OACd,CAACxE,EAAMwE,IAAKqZ,IAwCf,OACI,oCACI,yBAAK/b,UAAWjB,GAAOoU,SACnB,yBAAKnT,UAAWjB,GAAO8P,OACnB,kBAACY,GAAA,EAAD,CAAYzP,UAAWjB,GAAO+P,KAAMhH,QAlChC,WACX+T,EAAS1K,SAGd0K,EAAS1K,QAAQ6L,UA+BD,kBAAClN,GAAA,EAAD,OAEHpN,GACG,kBAAC+M,GAAA,EAAD,CAAYzP,UAAWjB,GAAO+P,KAAMhH,QA9CxD,WACI8T,GAAa,KA8CO,kBAACjL,GAAA,EAAD,QAIZ,kBAAC,GAAD,CAAQ9H,IAAKnG,EAAK1C,UAAWjB,GAAOyG,SACpC,kBAACqC,EAAA,EAAD,CACIhI,QAAQ,YACR8H,MAAM,UACN4K,UAAW,kBAAC0K,GAAA,EAAD,MACXjd,UAAWjB,GAAO8T,OAClB/K,QA1BO,WACd2T,GAAiB/X,GAGtB+X,EAAa/X,IAuBDsE,SAAU0T,GANd,0DAUCpc,GACG,kBAACmI,EAAA,EAAD,CAAYE,MAAO,QAASC,MAAO,SAAU5H,UAAWjB,GAAOO,OAC1DA,GAGT,2BAAOE,KAAK,OAAOQ,UAAWjB,GAAOuc,MAAO9L,IAAKqM,EAAUxF,SApDtD,SAAC3K,GAA0C,IAAD,EACjDhI,EAAI,UAAGgI,EAAMwR,OAAOC,aAAhB,aAAG,EAAoBhV,KAAK,GACjCzE,GAGL8Y,EAAS9Y,OAiDJgY,GAAW,kBAAChU,EAAA,EAAD,CAAgB1H,UAAWjB,GAAOwc,WAC9C,kBAAC,GAAD,CACI1Z,MAAO,oNACPoR,YAAa,6CACb5H,KAAMsQ,EACNrL,QAASyM,EACT3e,SApDS,WACjBye,IACAE,IACI/R,GACAA,S,uVE5EZ,IAAMoS,GAAa,CACfjK,QAASvE,YAAF,MAGPjP,MAAOiP,YAAF,OAKHqD,GAAmBxN,WAAaC,MAAM,CACxC7C,MAAO4C,WAAaG,SAAS,iLAGpByY,GAAkB,SAACnf,GAAkC,IACtDof,EAAsCpf,EAAtCof,QAAShN,EAA6BpS,EAA7BoS,QAASlS,EAAoBF,EAApBE,SAAUkB,EAAUpB,EAAVoB,MAEpC,OACI,kBAAC,GAAD,CAAOuC,MAAO,oGAAqBwJ,KAAMiS,EAAShN,QAASA,GACvD,kBAAC,EAAD,CACIlS,SAAUA,EACVC,iBAAkB4T,GAClBxT,kBAAkB,EAClBD,gBAAgB,EAChBF,OAAQ,SAACuH,GAAD,OACJ,yBAAK7F,UAAWod,GAAWjK,SACvB,kBAAC,EAAD,CACI/T,KAAM,QACNG,QAAS,CAAEW,KAAMkd,GAAWzd,OAC5BN,MAAO,sGAEVC,GACG,kBAACmI,EAAA,EAAD,CACIE,MAAO,QACPC,MAAO,SACP5H,UAAWod,GAAWzd,OAErBL,GAGT,yBAAKU,UAAW4O,YAAF,OACV,kBAAC/G,EAAA,EAAD,CACIhI,QAAQ,YACR8H,MAAM,UACN4K,UAAW,kBAACC,GAAA,EAAD,MACX1K,QAAO,OAAEjC,QAAF,IAAEA,OAAF,EAAEA,EAAMkC,WACfC,WAAU,OAACnC,QAAD,IAACA,OAAD,EAACA,EAAM4M,UALrB,iE,65BC1C5B,IAAMlT,GAAU,CACZ4T,QAASvE,YAAF,MAIPkG,KAAMlG,YAAF,OAKK2O,GAAU,SAACrf,GAA0B,IAAD,EACrCgY,EAA4BhY,EAA5BgY,aAAc9P,EAAclI,EAAdkI,UADuB,EAEwC0D,KAA7EC,EAFqC,EAErCA,KAAMS,EAF+B,EAE/BA,WAAwBM,GAFO,EAEnBJ,WAFmB,EAEPI,cAAcF,EAFP,EAEOA,eAAgBK,EAFvB,EAEuBA,aAFvB,EAGoCE,KAAzE7L,EAHqC,EAGrCA,MAAOiM,EAH8B,EAG9BA,SAAUH,EAHoB,EAGpBA,iBAAkBI,EAHE,EAGFA,iBAAkBC,EAHhB,EAGgBA,gBAHhB,EAISnF,oBAAS,GAJlB,mBAItCkX,EAJsC,KAIjBC,EAJiB,OAKHnX,wBAA6BG,GAL1B,mBAKtCiX,EALsC,KAKvBC,EALuB,KAO7CzS,qBAAU,WACNgL,EAAa,uHAAD,QAA6B,OAAJnM,QAAI,IAAJA,OAAA,EAAAA,EAAM8O,SAAN,OAAe9O,QAAf,IAAeA,OAAf,EAAeA,EAAMpF,WAC3D,CAACuR,EAAcnM,IAElBmB,qBAAU,WACD9E,GAGLA,EAAU2D,KACX,CAACA,EAAM3D,IAsCV,OACI,oCACI,kBAAC6B,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGpI,UAAWT,GAAQuV,MACjC,kBAAC,GAAD,CACIpS,IAAG,OAAEqH,QAAF,IAAEA,OAAF,EAAEA,EAAMvE,OACXkW,QAAS8B,EACT/B,aA3CG,SAAC/X,GACpB+Z,GAAuB,GACvB3S,EAAa,CAAEtF,OAAQ9B,IAAQqD,MAAK,WAChC0W,GAAuB,OAyCXzS,eArCG,WACnByS,GAAuB,GACvBxS,IAAelE,MAAK,WAChB0W,GAAuB,UAqCnB,kBAACxV,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACH,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CACIE,MAAI,EACJC,GAAI,EACJpI,UAAW4O,YAAF,OAIT,kBAAC,GAAD,CAAM/M,MAAO,qGACT,kBAAC,GAAD,CAAgBkI,KAAMA,EAAM3L,SA3CnC,SAAC2L,GAClBS,EAAWT,GACNhD,MAAK,kBAAMyE,EAAiB,CAAEH,MAAM,EAAMC,QAAS,kFACnDpE,OAAM,WACHkE,GAAiB,GACjBI,EAAiB,CAAEH,MAAM,EAAMC,QAAS,0FAuCxB,kBAAC4L,GAAA,EAAD,CACIlX,UAAW4O,YAAF,QAIb,kBAACnH,EAAA,EAAD,CACIzH,UAAW4O,YAAF,OADb,mFAOA,kBAAC,GAAD,CAAgBtP,MAAOoe,EAAetf,SA/CzC,SAACD,GACtBwf,OAAiBlX,GACjBmE,EAAezM,GACV4I,MAAK,kBAAMyE,EAAiB,CAAEH,MAAM,EAAMC,QAAS,wFACnDpE,OAAM,SAAC5H,GACJ,IAAMse,EAAczb,EAAe7C,GAC9Bse,GAGLD,EAAiBC,EAAY/b,eAyCrB,kBAACoG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAMvG,MAAO,4BAAb,OACKkI,QADL,IACKA,OADL,YACKA,EAAM8T,aADX,aACK,EAAatM,KAAI,SAACuM,GAAD,OACd,kBAACC,GAAA,EAAD,CACIpU,IAAKmU,EAAKhR,IACVzN,MAAOye,EAAKjc,MACZhC,QAAS,WACT8H,MAAO,UACP3H,UAAW4O,YAAF,gBAUrC,kBAAC,GAAD,CACIvD,KAAME,EAASF,KACfC,QAASC,EAASD,QAClBhM,MAAOA,EACPgR,QAAS7E,M,yRChIzB,IAAM1M,GAAS,CACXoU,QAASvE,YAAF,MAGPiE,OAAQjE,YAAF,OAQGoP,GAAuC,SAAC9f,GAAW,IAAD,EACHA,EAAhD+f,mBADmD,MACrC,mDADqC,EACzBnG,EAAsB5Z,EAAtB4Z,QAASvH,EAAarS,EAAbqS,SAE3C,OACI,yBAAKvQ,UAAWjB,GAAOoU,SAClB5C,EACD,kBAAC1I,EAAA,EAAD,CACIhI,QAAQ,YACR8H,MAAM,UACNlI,KAAK,QACL8S,UAAW,kBAACwD,GAAA,EAAD,MACXjO,QAASgQ,EACT9X,UAAWjB,GAAO8T,QAEjBoL,K,4fCpBjB,IAAMb,GAAa,CACfc,SAAUtP,YAAF,MAGRuP,QAASvP,YAAF,OAQEwP,GAAY,SAAClgB,GAA2B,IAAD,EACAA,EAAxCmgB,YADwC,MACjC,GADiC,EAC7BC,EAA6BpgB,EAA7BogB,YAD6B,EACApgB,EAAhB4N,YADgB,MACT,KADS,IAGRxF,oBAAS,GAHD,mBAGzCiY,EAHyC,KAG3BC,EAH2B,OAItBlY,wBAA6BG,GAJP,mBAIzCnH,EAJyC,KAIlC0c,EAJkC,KAMhD9Q,qBAAU,kBAAMoT,EAAYxS,KAAO,CAACA,EAAMwS,IANM,IAQxC3P,EAAeD,GAAc5C,GAA7B6C,WAUR,IAAM8P,EAAe9f,uBACjB,SAACR,GACGwQ,EAAWxQ,GACN4I,MAAK,SAAC3E,GACHpE,IAAwBiJ,KAAxB,uBAA6C7E,EAASjE,KAAK2O,MAC3DkP,OAASvV,MAEZS,OAAM,SAAC5H,GACJ,IAAM6H,EAAMhF,EAAe7C,GAC3B0c,EAAQ,OAAC7U,QAAD,IAACA,OAAD,EAACA,EAAKtF,YAG1B,CAAC8M,IAOL,OACI,kBAAC,IAAM/H,SAAP,KACI,kBAAC,GAAD,CAAckR,QA7BtB,WACI0G,GAAgB,KA6BR,kBAACjP,GAAA,EAAD,KACI,kBAACmP,GAAA,EAAD,CACInf,QAAS,CACLW,KAAM0O,YAAF,QAKR,kBAAC+P,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAWtf,QAAS,CAAEW,KAAMkd,GAAWc,WAAvC,kCACA,kBAACW,GAAA,EAAD,CAAWtf,QAAS,CAAEW,KAAMkd,GAAWc,WAAvC,oDAGA,kBAACW,GAAA,EAAD,CAAWtf,QAAS,CAAEW,KAAMkd,GAAWc,WAAvC,wCAGA,kBAACW,GAAA,EAAD,CAAWtf,QAAS,CAAEW,KAAMkd,GAAWc,WAAvC,6EAGA,kBAACW,GAAA,EAAD,CAAWtf,QAAS,CAAEW,KAAMkd,GAAWc,WAAvC,mHAKR,kBAACY,GAAA,EAAD,KACKT,EAAK9M,KAAI,SAACpJ,GAAD,OACN,kBAACyW,GAAA,EAAD,CACIrf,QAAS,CAAEW,KAAMkd,GAAWe,SAC5BxU,IAAKxB,EAAK2E,IACVhF,QAAS,kBArCrB2E,EAqCsCtE,EAAK2E,SApC3D9O,IAAwBiJ,KAAxB,uBAA6CwF,IAD9B,IAACA,IAuCY,kBAACoS,GAAA,EAAD,KACI,kBAACE,GAAA,EAAD,CACIC,YAAa,kBACThhB,IAAwBiJ,KAAxB,iBACckB,EAAK8W,OAAOnS,OAG9BzF,UAAW,UAEVc,EAAK8W,OAAOpd,QAGrB,kBAACgd,GAAA,EAAD,KAAY1W,EAAKtG,OACjB,kBAACgd,GAAA,EAAD,KAAY1W,EAAK+W,OAAOrd,OACxB,kBAACgd,GAAA,EAAD,KACKza,EAAW+D,EAAKgX,UAAW,qBAEhC,kBAACN,GAAA,EAAD,KACKza,EAAW+D,EAAKiX,UAAW,6BAQxD,kBAAC,GAAD,CACI9B,QAASiB,EACTjO,QAtFZ,WACIkO,GAAgB,IAsFRpgB,SAAUqgB,EACVnf,MAAOA,M,wGC/HvB,IAAM8d,GAAa,CACfpL,QAASpD,YAAF,OAKEyQ,GAAkB,SAACnhB,GAAW,IAC/BqS,EAAarS,EAAbqS,SAD8B,EAGZjK,mBAAS,GAHG,mBAG/BoD,EAH+B,KAGxByM,EAHwB,KAStC,OACI,6BACI,kBAAC5G,GAAA,EAAD,KACI,kBAAC6G,GAAA,EAAD,CACIvW,QAAQ,YACR6J,MAAOA,EACP2M,SAVK,SAAC3K,EAA8B4K,GAChDH,EAASG,IAUGC,eAAe,YACfC,UAAU,aAEV,kBAACC,GAAA,EAAD,CAAKpX,MAAM,wEACX,kBAACoX,GAAA,EAAD,CAAKpX,MAAM,4FAGnB,yBAAKW,UAAWod,GAAWpL,SACZ,IAAVtI,GAAe4V,WAAS/N,IAAIhB,GAAU,SAACgP,GAAD,OAAWA,KAAO,GAC9C,IAAV7V,GAAe4V,WAAS/N,IAAIhB,GAAU,SAACgP,GAAD,OAAWA,KAAO,MCzB5DC,GAAQ,SAACthB,GAAwB,IAClCgY,EAAiBhY,EAAjBgY,aAERhL,qBAAU,kBAAMgL,EAAa,sDAAa,CAACA,IAHF,MAKT5P,mBAAgB,MALP,mBAKlCmZ,EALkC,KAKxBnB,EALwB,KAOjC7Q,EAAUJ,GAAYoS,GAAtBhS,MAER,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAW6Q,YAAaA,EAAaxS,KAAM,KAAMuS,KAAM5Q,IACvD,kBAAC,GAAD,CAAW6Q,YAAaA,EAAaxS,KAAM,KAAMuS,KAAM5Q,M,wlDCDnE,IAAM2P,GAAa,CACfsC,KAAM9Q,YAAF,MAIJ+Q,UAAW/Q,YAAF,MAIToD,QAASpD,YAAF,MAGPgR,KAAMhR,YAAF,OAKKiR,GAAO,SAAC3hB,GAAuB,IAChCgY,EAAiBhY,EAAjBgY,aACAzJ,EAAOqT,cAAPrT,GAF+B,EAIYkB,GAAQoS,OAAOtT,IAA1DoB,EAJ+B,EAI/BA,KAAMI,EAJyB,EAIzBA,SAAUF,EAJe,EAIfA,WAAYU,EAJG,EAIHA,WAJG,EAK0CtD,KAAzE7L,EAL+B,EAK/BA,MAAOiM,EALwB,EAKxBA,SAAUH,EALc,EAKdA,iBAAkBI,EALJ,EAKIA,iBAAkBC,EALtB,EAKsBA,gBAE7DP,qBAAU,WACD2C,GAGLqI,EAAY,OAACrI,QAAD,IAACA,OAAD,EAACA,EAAMhM,SACpB,CAACgM,EAAMqI,IAiBV,OACI,kBAAC,IAAMtP,SAAP,KACI,kBAAC6I,GAAA,EAAD,CAAY3H,QAjBH,WACb9J,IAAwBiJ,KAAK,kBAiBrB,kBAAC+Y,GAAA,EAAD,OAEJ,kBAACzQ,GAAA,EAAD,CAAOvP,UAAWod,GAAWpL,SACtBnE,EACC,kBAAC,IAAMjH,SAAP,KACI,yBAAK5G,UAAW+a,KAAGnM,YAAA,MAAoBwO,GAAWwC,OAC9C,yBAAK5f,UAAW4O,YAAF,OACV,kBAACnH,EAAA,EAAD,CAAYzH,UAAW4O,YAAF,OAArB,qCACW,OAAVb,QAAU,IAAVA,OAAA,EAAAA,EAAYvI,QAAS,kBAAC,IAAD,CAAQ9C,IAAG,OAAEqL,QAAF,IAAEA,OAAF,EAAEA,EAAYvI,SAAa,kBAACuT,GAAA,EAAD,MAC5D,kBAACgG,GAAA,EAAD,CAAMkB,KAAI,uBAAWlS,QAAX,IAAWA,OAAX,EAAWA,EAAYjB,KAAO9M,UAAW4O,YAAF,OAAjD,OAAuFb,QAAvF,IAAuFA,OAAvF,EAAuFA,EAAYlM,QAEvG,yBAAK7B,UAAW4O,YAAF,OACV,kBAACnH,EAAA,EAAD,CAAYzH,UAAW4O,YAAF,OAArB,+EACA,kBAACnH,EAAA,EAAD,CAAYzH,UAAW4O,YAAF,OAAsCxK,EAAWyJ,EAAKsR,UAAW,sBAE1F,yBAAKnf,UAAW4O,YAAF,OACV,kBAACnH,EAAA,EAAD,CAAYzH,UAAW4O,YAAF,OAArB,yHACA,kBAACnH,EAAA,EAAD,CAAYzH,UAAW4O,YAAF,OAAsCxK,EAAWyJ,EAAKuR,UAAW,uBAG9F,kBAAC,EAAD,CACIhhB,SAnCP,SAACD,GACbsQ,EAAWtQ,GAAM+I,OAAM,SAAC5H,GAAW,IAAD,EACxB6H,EAAMhF,EAAe7C,GAC3B8L,GAAiB,GACjBI,EAAiB,CACbH,MAAM,EACNC,QAAO,iBAAEnE,QAAF,IAAEA,OAAF,EAAEA,EAAKtF,aAAP,QAAgB,SA8BZ1D,KAAM0P,EACNvP,OAAQ,SAACuH,GAAD,OACJ,kBAAC,IAAMe,SAAP,KACI,yBAAK5G,UAAW+a,KAAGqC,GAAWuC,UAAWvC,GAAWsC,KAAMtC,GAAWwC,OACjE,kBAAC,EAAD,CACIxgB,KAAM,QACNC,MAAO,sGAEX,kBAAC,EAAD,CACID,KAAM,OACNC,MAAO,yCAEX,kBAAC,GAAD,CACIA,MAAO,uCACPD,KAAM,WACNyR,QAAS5C,EAASsD,KAAI,SAACpJ,GAAD,MAAW,CAC7BuB,MAAOvB,EAAK2E,IACZzN,MAAO8I,EAAKtG,aAIxB,yBAAK7B,UAAW4O,YAAF,OACV,kBAAC/G,EAAA,EAAD,CACIhI,QAAQ,YACR8H,MAAM,UACN4K,UAAW,kBAACC,GAAA,EAAD,MACX1K,QAAO,OAAEjC,QAAF,IAAEA,OAAF,EAAEA,EAAMkC,WACftI,KAAM,QACNuI,SAAU0K,kBAAO,OAAC7M,QAAD,IAACA,OAAD,EAACA,EAAM8M,OAAP,OAAe9M,QAAf,IAAeA,OAAf,EAAeA,EAAMjH,gBAN1C,gEAgBpB,kBAACshB,GAAA,EAAD,OAGR,kBAAC,GAAD,CACI7U,KAAME,EAASF,KACfC,QAASC,EAASD,QAClBhM,MAAOA,EACPgR,QAAS7E,MCxHZ0U,GAAY,SAACjiB,GAA6B,IAC3CkiB,EAAsBliB,EAAtBkiB,QAASlI,EAAaha,EAAbga,SADiC,EAE1B5R,mBAA4BpI,EAAM6L,MAFR,mBAE3CA,EAF2C,KAErCC,EAFqC,OAGxB1D,mBAAS,IAHe,mBAG3CzE,EAH2C,KAGpCwe,EAHoC,KAOlD,OAFAnV,qBAAU,kBAAMlB,EAAQ9L,EAAM6L,QAAO,CAAC7L,EAAM6L,OAGxC,kBAAC,GAAD,CAAQlI,MAAOA,EAAOkI,KAAMA,EAAMmO,SAAUA,GACxC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOiC,KAAI,UAAKiG,EAAL,gBACP,kBAAC,GAAD,CAAYlK,aAAcmK,KAE9B,kBAAC,IAAD,CAAOlG,KAAI,UAAKiG,EAAL,YACP,kBAAC,GAAD,CAAQlK,aAAcmK,KAE1B,kBAAC,IAAD,CAAOlG,KAAI,UAAKiG,EAAL,aACP,kBAAC,GAAD,CAASlK,aAAcmK,EAAUja,UAAW4D,KAEhD,kBAAC,IAAD,CAAOmQ,KAAI,UAAKiG,EAAL,UAAsBE,OAAK,GAClC,kBAAC,GAAD,CAAOpK,aAAcmK,KAEzB,kBAAC,IAAD,CAAOlG,KAAI,UAAKiG,EAAL,cAA0BE,OAAK,GACtC,kBAAC,GAAD,CAAMpK,aAAcmK,Q,UChC3BE,GAAe,SAACriB,GAA+B,IACjDI,EAA0BJ,EAA1BI,OAAQkiB,EAAkBtiB,EAAlBsiB,KAASC,EAD+B,aACtBviB,EADsB,mBAEvD,OACI,gBAAC,IAAD,iBACQuiB,EADR,CAEIniB,OAAQ,SAACoiB,GAAD,OACJF,EACIliB,EAAOoiB,GAEP,gBAAC,IAAD,CAAUJ,OAAK,EAACrZ,MAAI,EAACoB,GAAI,kBCRhCsY,GAAqC,SAACziB,GAAW,IAClDsiB,EAAsCtiB,EAAtCsiB,KAAMliB,EAAgCJ,EAAhCI,OAAQsiB,EAAwB1iB,EAAxB0iB,WAAeH,EADoB,aACXviB,EADW,gCAEzD,OACI,kBAAC,IAAD,iBACQuiB,EADR,CAEIniB,OAAQ,SAACoiB,GAAD,OACJF,GAAQI,EACJ,kBAAC,IAAD,CAAUN,OAAO,EAAMrZ,MAAM,EAAMoB,GAAI,sBAEvC/J,EAAOoiB,QCQrBG,GAAapc,WAAaC,MAAM,CAClCC,MAAOF,WACFE,MAAM,uEACNC,SAAS,iLAGZG,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJrF,OAAQ8E,EAAMG,QAAQ,GACtBK,gBAAiBR,EAAMS,QAAQC,UAAUC,MAE7CC,KAAM,CACFC,MAAO,OACPX,UAAWF,EAAMG,QAAQ,IAE7BW,OAAQ,CACJC,aAAc,IAElBrG,MAAO,CACHQ,OAAQ,cAEZ8F,IAAK,CACDD,aAAc,IAElBE,OAAQ,CACJJ,MAAO,OACPE,aAAc,IAElB8a,eAAgB,CACZnZ,MAAO6R,KAAM,UAIRuH,GAAiB,SAAC7iB,GAAiC,IACpD+D,EAAc/D,EAAd+D,UADmD,EAEjBqE,oBAAS,GAFQ,mBAEpDC,EAFoD,KAErCC,EAFqC,OAGPF,wBAA6BG,GAHtB,mBAGpDC,EAHoD,KAGhCC,EAHgC,OAIfL,wBAA6BG,GAJd,mBAIpDqa,EAJoD,KAIpCE,EAJoC,KAsBrDzhB,EAAUwF,KAChB,OACI,oCACI,kBAAC,IAAD,KACI,6JAEJ,kBAAC,EAAD,CACI3G,SAvBK,SAACD,GACdqI,GAAiB,GACjBG,OAAsBF,GACtBua,OAAkBva,GxClEnB,SAAwBxE,EAAsB9D,GACjD,OAAO8D,EAAU4E,KAA8BvG,EAASG,gBAAiBtC,GwCkErE8iB,CAAehf,EAAW9D,GACrB4I,MAAK,SAAC3E,GACHoE,GAAiB,GACjBwa,EAAkB5e,EAASjE,SAE9B+I,OAAM,SAAC5H,GACJ,IAAM6H,EAAMhF,EAAe7C,GAC3BkH,GAAiB,GACjBG,EAAqB,OAACQ,QAAD,IAACA,OAAD,EAACA,EAAKtF,WAY3BxD,iBAAkBwiB,GAClBpiB,kBAAkB,EAClBH,OAAQ,SAACuH,GAAD,OACJ,kBAACuB,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,kBAACC,EAAA,EAAD,MACA,yBAAKvH,UAAWT,EAAQ2F,OACpB,kBAAC,IAAD,CAAQlF,UAAWT,EAAQiG,QACvB,kBAACgC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYJ,UAAU,KAAKxH,QAAQ,KAAKG,UAAWT,EAAQ0G,KAA3D,6HAGA,kBAAC,EAAD,CACI7G,KAAM,QACNC,MAAO,SACPC,QAASoH,EACTnH,QAAS,CAAEW,KAAMX,EAAQI,SAE5B4G,GACG,kBAACmB,EAAA,EAAD,CAAgB1H,UAAS,UAAKT,EAAQ2G,OAAb,YAAuB3G,EAAQ0G,OAE3DS,GACG,kBAACe,EAAA,EAAD,CACIE,MAAO,QACPC,MAAO,SACP5H,UAAWT,EAAQ0G,KAElBS,GAGRoa,GACG,kBAACrZ,EAAA,EAAD,CACIG,MAAO,SACP5H,UAAS,UAAKT,EAAQ0G,IAAb,YAAoB1G,EAAQuhB,iBAEpCA,GAGT,kBAACjZ,EAAA,EAAD,CACI/H,WAAS,EACTD,QAAQ,YACR8H,MAAM,UACNG,QAAO,OAAEjC,QAAF,IAAEA,OAAF,EAAEA,EAAMkC,WACfC,SAAUzB,EACVvG,UAAWT,EAAQwG,QANvB,0DAUA,kBAACkC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACT,kBAAC,IAAD,CAAMC,GAAG,YAAT,2CChErB6Y,GArEO,WAAO,IAAD,EACA5a,wBAA4BG,GAD5B,mBACjBsD,EADiB,KACXC,EADW,KAElB/H,EAAYgI,mBAAQ,kBAAM,IAAI3B,KAAa,IAFzB,EAGIhC,qBAAW6C,aAAagB,QAAQ,UAHpC,mBAGjBgX,EAHiB,KAGTC,EAHS,KAKxBlW,qBAAU,WACN,IAAMhB,EAAcf,aAAagB,QAAQ,SACzC,IAAKD,EAGD,OAFAf,aAAakY,WAAW,cACxBrjB,IAAwBiJ,KAAK,YAGjC,IAAMuB,EAAgBa,KAAKe,MAAMF,GACjCjI,EAAU+E,SAASwB,GACnBxG,EAAUC,GACL8E,MAAK,SAAC3E,GACH4H,EAAQ5H,EAASjE,SAEpB+I,OAAM,WACHiC,aAAakY,WAAW,SACxBrjB,IAAwBiJ,KAAK,iBAEtC,CAAChF,IAEJ,IAAMqf,EAAS,WACXnY,aAAakY,WAAW,SACxBD,GAAU,GACVpjB,IAAwBiJ,KAAK,aAGjC,OACI,kBAAC,IAAD,CAAQnJ,QAASE,KACb,kBAAC,IAAD,KACI,kBAAC,GAAD,CACIwiB,KAAMW,EACNb,OAAO,EACPM,YAAY,EACZzG,KAAM,WACN7b,OAAQ,kBACJ,kBAAC,EAAD,CACI2D,UAAWA,EACXmE,UAAW4D,EACX3D,SAAU,kBAAM+a,GAAU,SAItC,kBAAC,GAAD,CACIZ,KAAMW,EACNP,YAAY,EACZzG,KAAM,mBACNmG,OAAO,EACPhiB,OAAQ,kBAAM,kBAAC,GAAD,CAAgB2D,UAAWA,OAE7C,kBAAC,GAAD,CACIue,KAAMW,EACNhH,KAAM,eACN7b,OAAQ,kBACJ,kBAAC,GAAD,CACIyL,KAAMA,EACNqW,QAAS,SACTlI,SAAUoJ,UC5DlBjJ,QACW,cAA7BkJ,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5e,MACvB,2DCZN6e,IAASpjB,OAAO,kBAAC,GAAD,MAASqjB,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhb,MAAK,SAAAib,GACjCA,EAAaC,kB","file":"static/js/main.ab29f8d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.7a21cbe9.svg\";","import { createBrowserHistory, History } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport const AppContext = {\r\n    getHistory(): History {\r\n        return  history;\r\n    }\r\n};\r\n","import React, { useCallback } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { FormikErrors, FormikProps } from \"formik/dist/types\";\r\nimport { stubObject } from \"lodash\";\r\n\r\ninterface ICustomFormProps<T> {\r\n    data?: T;\r\n    validationSchema?: any | (() => any);\r\n    validateOnChange?: boolean;\r\n    validateOnBlur?: boolean;\r\n\r\n    render(props?: FormikProps<T>): void;\r\n\r\n    onSubmit?(data: T): void;\r\n\r\n    validate?(data: T): void | object | Promise<FormikErrors<T>>;\r\n}\r\n\r\nexport const CustomForm = <T extends object>(props: ICustomFormProps<T>) => {\r\n    const {\r\n        data = {},\r\n        onSubmit,\r\n        validationSchema,\r\n        render,\r\n        validate,\r\n        validateOnBlur = true,\r\n        validateOnChange = true,\r\n    } = props;\r\n\r\n    const handleSubmit = useCallback(\r\n        (data: T) => {\r\n            if (!onSubmit) {\r\n                return;\r\n            }\r\n            onSubmit(data);\r\n        },\r\n        [onSubmit],\r\n    );\r\n\r\n    return (\r\n        <Formik<T>\r\n            initialValues={data || stubObject()}\r\n            onSubmit={handleSubmit}\r\n            validate={validate}\r\n            validationSchema={validationSchema}\r\n            validateOnChange={validateOnChange}\r\n            validateOnBlur={validateOnBlur}\r\n            enableReinitialize\r\n        >\r\n            {(props) => render(props)}\r\n        </Formik>\r\n    );\r\n};\r\n","import * as emotion from \"emotion\";\r\nimport React from \"react\";\r\nimport { Field } from \"formik\";\r\nimport { TextField as MaterialTextField, InputLabelProps } from \"@material-ui/core\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport { FieldProps } from \"formik/dist/Field\";\r\n\r\ninterface ITextFieldProps {\r\n    name: string;\r\n    InputLabelProps?: InputLabelProps;\r\n    label?: string;\r\n    error?: boolean;\r\n    classes?: object;\r\n    type?: string;\r\n    size?: \"small\" | \"medium\";\r\n}\r\n\r\nconst styles = {\r\n    errorMessage: emotion.css`\r\n        margin: 10px 0 0 0 !important;\r\n        display: flex;\r\n        align-items: center;\r\n    `,\r\n    errorText: emotion.css`\r\n        padding-left: 10px;\r\n    `,\r\n};\r\n\r\nexport const TextField = (props: ITextFieldProps) => {\r\n    const { name, label, error, classes, type = \"text\", size, InputLabelProps } = props;\r\n\r\n    return (\r\n        <Field name={name}>\r\n            {({ field, meta }: FieldProps) => (\r\n                <MaterialTextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    label={label}\r\n                    type={type}\r\n                    error={!!meta.error || error}\r\n                    size={size}\r\n                    InputLabelProps={InputLabelProps}\r\n                    helperText={\r\n                        meta.error && (\r\n                            <>\r\n                                <ErrorIcon />\r\n                                <span className={styles.errorText}>{meta.error}</span>\r\n                            </>\r\n                        )\r\n                    }\r\n                    FormHelperTextProps={{\r\n                        classes: { root: styles.errorMessage },\r\n                    }}\r\n                    classes={classes}\r\n                    margin=\"normal\"\r\n                    {...field}\r\n                />\r\n            )}\r\n        </Field>\r\n    );\r\n};\r\n","export const host = {\r\n    LOCAL: \"http://localhost:8080\"\r\n};\r\n","export const ApiPaths = {\r\n    SIGN_IN: \"login/sign-in\",\r\n    UPDATE_TOKEN: \"login/update-token\",\r\n    FORGOT_PASSWORD: \"login/forgot-password\",\r\n    GET_USER: \"user/get\",\r\n    UPDATE_USER: \"user/update\",\r\n    UPDATE_PASSWORD: \"user/update-password\",\r\n    DELETE_USER: \"user/delete\",\r\n    UPDATE_AVATAR: \"user/avatar/update\",\r\n    DELETE_AVATAR: \"user/avatar/delete\",\r\n    // navigation\r\n    GET_NAVIGATION: \"/navigations/:id\",\r\n    GET_NAVIGATION_TYPES: \"/navigations/types\",\r\n    GET_NAVIGATION_LIST: \"/navigations/list\",\r\n    UPDATE_NAVIGATION: \"/navigations/:id/update\",\r\n    CREATE_NAVIGATION: \"/navigations/create\",\r\n    REORDER_NAVIGATION: \"/navigations/reorder\",\r\n    DELETE_NAVIGATION: \"/navigations/:id/delete\",\r\n    // pages\r\n    CREATE_PAGE: \"/page/create\",\r\n    GET_PAGE_LIST: \"/page/list\",\r\n    GET_PAGE: \"/page/:id\",\r\n    GET_PAGE_STATUSES: \"/page/statuses\",\r\n    GET_PAGE_AUTHOR: \"/page/:id/author\",\r\n};\r\n","interface ISidebarLink {\r\n    title: string;\r\n    link: string;\r\n}\r\n\r\nexport const sidebarLinks: ISidebarLink[] = [\r\n    {\r\n        title: \"Хедер\",\r\n        link: \"/panel/header\"\r\n    },\r\n    {\r\n        title: \"Навигация\",\r\n        link: \"/panel/navigation\"\r\n    },\r\n    {\r\n        title: \"Футер\",\r\n        link: \"/panel/footer\"\r\n    },\r\n    {\r\n        title: \"Страницы\",\r\n        link: \"/panel/pages\"\r\n    },\r\n];\r\n\r\nexport const adminSidebarLinks: ISidebarLink[] = [\r\n    {\r\n        title: \"Пользователи\",\r\n        link: \"/panel/users\"\r\n    },\r\n    {\r\n        title: \"Журнал\",\r\n        link: \"/panel/journal\"\r\n    },\r\n];\r\n","import {Transport } from \"../transport\";\r\nimport { IChangePasswordData, IUser } from \"../entities\";\r\nimport { ApiPaths } from \"../config\";\r\n\r\nexport function fetchUser(transport: Transport) {\r\n    return transport.get<IUser>(ApiPaths.GET_USER);\r\n}\r\n\r\nexport function updateUser(transport: Transport, user: Partial<IUser>) {\r\n    return transport.put<Partial<IUser>, IUser>(ApiPaths.UPDATE_USER, user);\r\n}\r\n\r\nexport function updatePassword(transport: Transport, data: IChangePasswordData) {\r\n    return transport.put<IChangePasswordData, void>(ApiPaths.UPDATE_PASSWORD, data);\r\n}\r\n\r\nexport function deleteUser(transport: Transport) {\r\n    return transport.delete(ApiPaths.DELETE_USER);\r\n}\r\n\r\nexport function updateAvatar(transport: Transport, data: FormData) {\r\n    return transport.put<FormData, IUser>(ApiPaths.UPDATE_AVATAR, data);\r\n}\r\n\r\nexport function deleteAvatar(transport: Transport) {\r\n    return transport.delete<IUser>(ApiPaths.DELETE_AVATAR);\r\n}\r\n","import { IServerError, TServerError } from \"../entities\";\r\nimport { AxiosError, AxiosResponse } from \"axios\";\r\n\r\nexport function getServerError(error: AxiosError): IServerError | undefined {\r\n    const response = error.response as AxiosResponse<TServerError>;\r\n    if (!response) {\r\n        return undefined;\r\n    }\r\n    return response.data.error;\r\n}\r\n","import { head, last, get } from \"lodash\";\r\nimport fileType from \"file-type\";\r\n\r\nexport function dataURLtoFile(dataurl: string, filename: string): File {\r\n    const type = head(dataurl.split(\",\"));\r\n    const src = last(dataurl.split(\",\"));\r\n\r\n    const mime = last(type!.match(/:(.*?);/));\r\n    const byteString = atob(src!);\r\n    let n = byteString.length;\r\n    const u8arr = new Uint8Array(n);\r\n    while (n) {\r\n        u8arr[n - 1] = byteString.charCodeAt(n - 1);\r\n        n -= 1; // to make eslint happy\r\n    }\r\n    const blob = new Blob([u8arr], { type: mime });\r\n    const file = new File([blob], filename, { type: mime });\r\n    return file;\r\n}\r\n\r\nexport function getExtension(resolve: (ext: string) => void, file: File): void {\r\n    const reader = new FileReader();\r\n    if (!file) {\r\n        return;\r\n    }\r\n    reader.readAsArrayBuffer(file);\r\n    (reader.onloadend = () => {\r\n        const result = reader.result as ArrayBuffer;\r\n        const ext = get(fileType(result), \"ext\", \"\");\r\n        resolve(ext);\r\n    });\r\n}\r\n\r\nexport function getUnsafeExtension(file: File): string {\r\n    return (last(file.name.split(\".\")) || \"\").toLowerCase();\r\n}\r\n","import moment from \"moment\";\r\n\r\nexport function formatData(date: Date | string, format: string) {\r\n    return moment(date).format(format)\r\n}\r\n","import React from \"react\";\r\nimport { CustomForm } from \"../../components/custom-form\";\r\nimport { TextField } from \"../../components/text-field\";\r\nimport * as Yup from \"yup\";\r\nimport { ILogin, IUser } from \"../../entities\";\r\nimport { fetchUser, signIn } from \"../../api\";\r\nimport { Transport } from \"../../transport\";\r\nimport { AppContext } from \"../../context\";\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Container,\r\n    CssBaseline,\r\n    Grid,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { getServerError } from \"../../utils\";\r\nimport Helmet from \"react-helmet\";\r\nimport { Lock } from \"@material-ui/icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst LoginSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email(\"Невалидный e-mail\")\r\n        .required(\"Поле обязательно для заполнения\"),\r\n    password: Yup.string()\r\n        .min(6, \"Пароль должен сожержать минимум 6 символов\")\r\n        .required(\"Поле обязательно для заполнения\"),\r\n});\r\n\r\ninterface ILoginProps {\r\n    transport: Transport;\r\n\r\n    onSetUser?(user: IUser): void;\r\n\r\n    onSignIn?(): void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        marginBottom: 20\r\n    },\r\n    field: {\r\n        margin: \"0 0 40px 0\"\r\n    },\r\n    row: {\r\n        marginBottom: 20,\r\n    },\r\n    loader: {\r\n        width: \"100%\",\r\n        marginBottom: 30\r\n    }\r\n}));\r\n\r\nexport const Login = (props: ILoginProps) => {\r\n    const { transport, onSetUser, onSignIn } = props;\r\n    const [loaderVisible, setLoaderVisible] = useState(false);\r\n    const [serverErrorMessage, setServerErrorMessage] = useState<string | undefined>(undefined);\r\n\r\n    const onSubmit = (data: ILogin) => {\r\n        setLoaderVisible(true);\r\n        setServerErrorMessage(undefined);\r\n        signIn(transport, data)\r\n            .then((response) => transport.setToken(response.data))\r\n            .then(() => {\r\n                fetchUser(transport)\r\n                    .then((response) => {\r\n                        if (onSetUser) {\r\n                            onSetUser(response.data);\r\n                            if (onSignIn) {\r\n                                onSignIn();\r\n                                AppContext.getHistory().push(\"/panel/navigation\");\r\n                            }\r\n                        }\r\n                    })\r\n                    .catch(() => AppContext.getHistory().push(\"/sign-in\"));\r\n            })\r\n            .catch((error) => {\r\n                const err = getServerError(error);\r\n                setServerErrorMessage(err?.title);\r\n                setLoaderVisible(false);\r\n            });\r\n    };\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet>\r\n                <title>Авторизация</title>\r\n            </Helmet>\r\n            <CustomForm\r\n                onSubmit={onSubmit}\r\n                validationSchema={LoginSchema}\r\n                validateOnChange\r\n                render={(form) => (\r\n                    <Container component=\"main\" maxWidth=\"xs\">\r\n                        <CssBaseline />\r\n                        <div className={classes.paper}>\r\n                            <Avatar className={classes.avatar}>\r\n                                <Lock />\r\n                            </Avatar>\r\n                            <Typography component=\"h1\" variant=\"h5\" className={classes.row}>\r\n                                Авторизация\r\n                            </Typography>\r\n                            <TextField\r\n                                name={\"email\"}\r\n                                label={\"E-mail\"}\r\n                                error={!!serverErrorMessage}\r\n                                classes={{ root: classes.field }}\r\n                            />\r\n                            <TextField\r\n                                name={\"password\"}\r\n                                label={\"Пароль\"}\r\n                                error={!!serverErrorMessage}\r\n                                type={\"password\"}\r\n                                classes={{ root: classes.field }}\r\n                            />\r\n                            {loaderVisible && <LinearProgress className={`${classes.loader} ${classes.row}`} />}\r\n                            {serverErrorMessage && (\r\n                                <Typography color={\"error\"} align={\"center\"} className={classes.row}>\r\n                                    {serverErrorMessage}\r\n                                </Typography>\r\n                            )}\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={form?.submitForm}\r\n                                disabled={loaderVisible}\r\n                                className={classes.submit}\r\n                            >\r\n                                Войти\r\n                            </Button>\r\n                            <Grid container>\r\n                                <Grid item xs>\r\n                                    <Link to=\"/forgot-password\">\r\n                                        Забыли пароль?\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Container>\r\n                )}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import { Transport } from \"../transport\";\r\nimport { ILogin, IToken } from \"../entities\";\r\nimport { ApiPaths } from \"../config\";\r\n\r\nexport function signIn(transport: Transport, data: ILogin) {\r\n    return transport.post<ILogin, IToken>(ApiPaths.SIGN_IN, data);\r\n}\r\n\r\nexport function forgotPassword(transport: Transport, data: {email: string}) {\r\n    return transport.post<{email: string}, string>(ApiPaths.FORGOT_PASSWORD, data);\r\n}\r\n","import axios from \"axios\";\r\nimport { host } from \"../config\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport { IToken, TResponse } from \"../entities\";\r\nimport { mapValues, isString } from \"lodash\";\r\n\r\nexport type TransportConfig = Pick<AxiosRequestConfig, \"headers\" | \"baseURL\" | \"params\">;\r\n\r\nexport class Transport {\r\n    private headers = {};\r\n    private token?: IToken;\r\n\r\n    private readonly instance = axios.create({\r\n        baseURL: host.LOCAL,\r\n    });\r\n\r\n    async get<Response>(url: string, params?: object): Promise<TResponse<Response>> {\r\n        const response = await this.instance.get(url, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async post<Request, Response>(\r\n        url: string,\r\n        data?: Request,\r\n        params?: object,\r\n    ): Promise<TResponse<Response>> {\r\n        const response = await this.instance.post(url, data, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async put<Request, Response>(\r\n        url: string,\r\n        data: Request,\r\n        params?: object,\r\n    ): Promise<TResponse<Response>> {\r\n        const response = await this.instance.put(url, data, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async delete<Response = void>(url: string, params?: object): Promise<TResponse<Response>> {\r\n        const response = await this.instance.delete(url, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    setToken(token: IToken): void {\r\n        this.token = token;\r\n        localStorage.setItem(\"token\", JSON.stringify(token));\r\n    }\r\n\r\n    formatToFormData(params: {}): FormData {\r\n        const formData = new FormData();\r\n        mapValues(params, (value: string | File, key) => {\r\n            const isFile = !isString(value) && (value as {}) instanceof File;\r\n            if (!isFile && !isString(value)) {\r\n                return formData.append(key, JSON.stringify(value));\r\n            }\r\n            formData.append(key, value);\r\n        });\r\n        return formData;\r\n    }\r\n\r\n    private config(params?: object): TransportConfig {\r\n        return {\r\n            baseURL: host.LOCAL,\r\n            headers: {\r\n                ...this.headers,\r\n                ...this.token,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            params,\r\n        };\r\n    }\r\n\r\n    // private async reloginOnExpiration() {\r\n    //     const tokenString = localStorage.getItem(\"token\");\r\n    //     if (!tokenString) {\r\n    //         localStorage.removeItem(\"token\");\r\n    //         AppContext.getHistory().push(\"/sign-in\");\r\n    //         return;\r\n    //     }\r\n    //     const token: IToken = JSON.parse(tokenString);\r\n    //     this.setToken(token);\r\n    //     const update = await this.post<undefined, TResponse<IToken> | TServerError>(\r\n    //         ApiPaths.UPDATE_TOKEN,\r\n    //         undefined,\r\n    //         this.config(),\r\n    //     );\r\n    //     if (update.success) {\r\n    //         this.setToken((update.data as TResponse<IToken>).data);\r\n    //     } else {\r\n    //         localStorage.removeItem(\"token\");\r\n    //         AppContext.getHistory().push(\"/sign-in\");\r\n    //     }\r\n    // }\r\n}\r\n","import { IUpdateAvatar, IChangePasswordData, IUser, TResponse } from \"../entities\";\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { Transport } from \"../transport\";\r\nimport { deleteAvatar, deleteUser, fetchUser, updateAvatar, updatePassword, updateUser } from \"../api\";\r\n\r\nexport function useUser(): {\r\n    user?: IUser;\r\n    fetchOne: () => Promise<void>;\r\n    updateUser: (user: Partial<IUser>) => Promise<void>;\r\n    deleteUser: () => Promise<TResponse<void>>;\r\n    updatePassword: (data: IChangePasswordData) => Promise<TResponse<void>>;\r\n    updateAvatar: (data: IUpdateAvatar) => Promise<void>;\r\n    deleteAvatar: () => Promise<void>;\r\n} {\r\n    const [user, setUser] = useState<IUser | undefined>(undefined);\r\n    const transport = useMemo(() => new Transport(), []);\r\n    const tokenString = localStorage.getItem(\"token\");\r\n    transport.setToken(JSON.parse(tokenString!));\r\n\r\n    const fetchOne = useCallback(\r\n        () =>\r\n            fetchUser(transport)\r\n                .then((response) => setUser(response.data))\r\n                .catch(console.error),\r\n        [transport, setUser],\r\n    );\r\n\r\n    const update = useCallback(\r\n        (user: Partial<IUser>) => {\r\n            return updateUser(transport, user).then((response) => setUser(response.data));\r\n        },\r\n        [transport, setUser],\r\n    );\r\n\r\n    const delUser = useCallback(() => {\r\n        return deleteUser(transport);\r\n    }, [transport]);\r\n\r\n    const updatePass = useCallback(\r\n        (data: IChangePasswordData) => {\r\n            return updatePassword(transport, data);\r\n        },\r\n        [transport],\r\n    );\r\n\r\n    const onUpdateAvatar = useCallback(\r\n        (data: IUpdateAvatar) => {\r\n            return updateAvatar(transport, transport.formatToFormData(data)).then((response) =>\r\n                setUser(response.data),\r\n            );\r\n        },\r\n        [transport],\r\n    );\r\n\r\n    const onDeleteAvatar = useCallback(() => {\r\n        return deleteAvatar(transport).then((response) => setUser(response.data));\r\n    }, [transport]);\r\n\r\n    useEffect(() => {\r\n        fetchOne();\r\n    }, [fetchOne]);\r\n\r\n    return {\r\n        user,\r\n        fetchOne,\r\n        updateUser: update,\r\n        deleteUser: delUser,\r\n        updatePassword: updatePass,\r\n        updateAvatar: onUpdateAvatar,\r\n        deleteAvatar: onDeleteAvatar\r\n    };\r\n}\r\n","import React, { Dispatch, SetStateAction, useState } from \"react\";\r\n\r\nexport interface ISnackbarState {\r\n    open: boolean;\r\n    message: string;\r\n}\r\n\r\nexport function useSnackbar(): {\r\n    error: boolean,\r\n    snackbar: ISnackbarState,\r\n    setSnackbarError: Dispatch<SetStateAction<boolean>>,\r\n    setSnackbarState: Dispatch<SetStateAction<ISnackbarState>>,\r\n    onSnackbarClose: (event?: React.SyntheticEvent, reason?: string) => void,\r\n} {\r\n    const [error, setSnackbarError] = useState(false); // success/error snackbar state\r\n    const [snackbar, setSnackbarState] = useState({ open: false, message: \"\" }); // open/close snackbar\r\n\r\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n        setSnackbarState({ open: false, message: \"\" });\r\n        // wait till animation ends\r\n        setTimeout(() => setSnackbarError(false), 100);\r\n    }\r\n\r\n    return {error, snackbar, setSnackbarError, setSnackbarState, onSnackbarClose};\r\n}\r\n","import { Transport } from \"../transport\";\r\nimport {\r\n    INavigation,\r\n    INavigationOrder,\r\n    INavigationType,\r\n    TCreateNavigationRequest,\r\n    TLang, TUpdateNavigationRequest, TypeNavigation,\r\n} from \"../entities\";\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n    createNavigation,\r\n    deleteNavigation,\r\n    getNavigation,\r\n    getNavigationList,\r\n    getNavigationTypes,\r\n    reorderNavigations,\r\n    updateNavigation,\r\n} from \"../api\";\r\n\r\nexport function useNavigation(\r\n    lang: TLang,\r\n    type: TypeNavigation = \"navigation\"\r\n): {\r\n    navigationTypes: INavigationType[];\r\n    navigations: INavigation[];\r\n    navigation?: INavigation;\r\n    getNavigation: (id: string) => Promise<void>;\r\n    createNavigation: (navigation: TCreateNavigationRequest) => Promise<void>;\r\n    updateNavigation: (navigation: TUpdateNavigationRequest) => Promise<void>;\r\n    deleteNavigation: (id: string) => Promise<void>;\r\n    reorderNavigation: (order: INavigationOrder) => Promise<void>;\r\n} {\r\n    const [navigationTypes, setNavigationTypes] = useState<INavigationType[]>([]);\r\n    const [navigations, setNavigations] = useState<INavigation[]>([]);\r\n    const [navigation, setNavigation] = useState<INavigation | undefined>(undefined);\r\n\r\n    const transport = useMemo(() => new Transport(), []);\r\n    const tokenString = localStorage.getItem(\"token\");\r\n    transport.setToken(JSON.parse(tokenString!));\r\n\r\n    const getTypes = useCallback(() => {\r\n        return getNavigationTypes(transport, type).then((response) => setNavigationTypes(response.data));\r\n    }, [transport, type]);\r\n\r\n    const getList = useCallback(() => {\r\n        return getNavigationList(transport, lang, type).then((response) => setNavigations(response.data));\r\n    }, [transport, type, lang]);\r\n\r\n    const get = useCallback(\r\n        (id: string) => {\r\n            return getNavigation(transport, id).then((response) => setNavigation(response.data));\r\n        },\r\n        [transport],\r\n    );\r\n\r\n    const create = useCallback(\r\n        (navigation: TCreateNavigationRequest) => {\r\n            return createNavigation(transport, navigation, lang, type).then((response) =>\r\n                setNavigations(response.data),\r\n            );\r\n        },\r\n        [transport, type, lang],\r\n    );\r\n\r\n    const update = useCallback(\r\n        (navigation: TUpdateNavigationRequest) => {\r\n            return updateNavigation(transport, navigation._id, navigation).then((response) =>\r\n                setNavigations(response.data),\r\n            );\r\n        },\r\n        [transport],\r\n    );\r\n\r\n    const onDeleteNavigation = useCallback(\r\n        (id: string) => {\r\n            return deleteNavigation(transport, id, lang, type).then((response) =>\r\n                setNavigations(response.data),\r\n            );\r\n        },\r\n        [transport, type, lang],\r\n    );\r\n\r\n    const reorder = useCallback(\r\n        (order: INavigationOrder) => {\r\n            return reorderNavigations(transport, order, lang, type).then((response) =>\r\n                setNavigations(response.data),\r\n            );\r\n        },\r\n        [transport, type, lang],\r\n    );\r\n\r\n    useEffect(() => {\r\n        getTypes();\r\n        getList();\r\n    }, [getTypes, getList]);\r\n\r\n    return {\r\n        navigationTypes,\r\n        navigations,\r\n        navigation,\r\n        getNavigation: get,\r\n        createNavigation: create,\r\n        updateNavigation: update,\r\n        deleteNavigation: onDeleteNavigation,\r\n        reorderNavigation: reorder,\r\n    };\r\n}\r\n","import { Transport } from \"../transport\";\r\nimport {\r\n    INavigation,\r\n    INavigationOrder,\r\n    INavigationType,\r\n    TCreateNavigationRequest,\r\n    TLang,\r\n    TypeNavigation,\r\n} from \"../entities\";\r\nimport { ApiPaths } from \"../config\";\r\n\r\nexport function getNavigationTypes(transport: Transport, type: TypeNavigation) {\r\n    return transport.get<INavigationType[]>(ApiPaths.GET_NAVIGATION_TYPES, {type});\r\n}\r\n\r\nexport function getNavigationList(transport: Transport, lang: TLang, type: TypeNavigation) {\r\n    return transport.get<INavigation[]>(ApiPaths.GET_NAVIGATION_LIST, { lang, type });\r\n}\r\n\r\nexport function getNavigation(transport: Transport, id: string) {\r\n    return transport.get<INavigation>(ApiPaths.GET_NAVIGATION.replace(\":id\", id));\r\n}\r\n\r\nexport function updateNavigation(transport: Transport, id: string, navigation: Partial<INavigation>) {\r\n    return transport.put<Partial<INavigation>, INavigation[]>(\r\n        ApiPaths.UPDATE_NAVIGATION.replace(\":id\", id),\r\n        navigation,\r\n    );\r\n}\r\n\r\nexport function createNavigation(transport: Transport, navigation: TCreateNavigationRequest, lang: TLang, type: TypeNavigation) {\r\n    return transport.post<TCreateNavigationRequest, INavigation[]>(ApiPaths.CREATE_NAVIGATION, navigation, {\r\n        lang,\r\n        type\r\n    });\r\n}\r\n\r\nexport function deleteNavigation(transport: Transport, id: string, lang: TLang, type: TypeNavigation) {\r\n    return transport.delete<INavigation[]>(ApiPaths.DELETE_NAVIGATION.replace(\":id\", id), { lang, type });\r\n}\r\n\r\nexport function reorderNavigations(transport: Transport, reorder: INavigationOrder, lang: TLang, type: TypeNavigation) {\r\n    return transport.put<INavigationOrder, INavigation[]>(ApiPaths.REORDER_NAVIGATION, reorder, {\r\n        lang, type\r\n    });\r\n}\r\n","import { Transport } from \"../../transport\";\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { IPagesTableRow, TLang } from \"../../entities\";\r\nimport { fetchPageList } from \"../../api/page\";\r\n\r\nexport function usePageList(lang: TLang): {\r\n    pages: IPagesTableRow[];\r\n    getPages: () => void;\r\n} {\r\n    const [list, setList] = useState<IPagesTableRow[]>([]);\r\n\r\n    const transport = useMemo(() => new Transport(), []);\r\n    const tokenString = localStorage.getItem(\"token\");\r\n    transport.setToken(JSON.parse(tokenString!));\r\n\r\n    const getList = useCallback(() => {\r\n        return fetchPageList(transport, lang).then((response) => setList(response.data));\r\n    }, [transport, lang]);\r\n\r\n    useEffect(() => {\r\n        getList();\r\n    }, [getList]);\r\n\r\n    return {pages: list, getPages: getList}\r\n}\r\n","import { Transport } from \"../transport\";\r\nimport {\r\n    ICreatePageRequest,\r\n    ICreatePageResponse,\r\n    IPage,\r\n    IPageAuthor,\r\n    IPagesTableRow,\r\n    IPageStatus,\r\n    TLang,\r\n} from \"../entities\";\r\nimport { ApiPaths } from \"../config\";\r\n\r\nexport function fetchPageStatusList(transport: Transport) {\r\n    return transport.get<IPageStatus[]>(ApiPaths.GET_PAGE_STATUSES);\r\n}\r\n\r\nexport function fetchPageList(transport: Transport, lang: TLang) {\r\n    return transport.get<IPagesTableRow[]>(ApiPaths.GET_PAGE_LIST, {lang});\r\n}\r\n\r\nexport function createPage(transport: Transport, data: ICreatePageRequest, lang: TLang) {\r\n    return transport.post<ICreatePageRequest, ICreatePageResponse>(ApiPaths.CREATE_PAGE, data, {lang});\r\n}\r\n\r\nexport function fetchPage(transport: Transport, id: string) {\r\n    return transport.get<IPage>(ApiPaths.GET_PAGE.replace(\":id\", id));\r\n}\r\n\r\nexport function fetchPageAuthor(transport: Transport, id: string) {\r\n    return transport.get<IPageAuthor>(ApiPaths.GET_PAGE_AUTHOR.replace(\":id\", id));\r\n}\r\n\r\nexport function updatePage(transport: Transport, id: string, data: Partial<IPage>) {\r\n    return transport.put<Partial<IPage>, IPage>(ApiPaths.GET_PAGE.replace(\":id\", id), data);\r\n}\r\n","import { Transport } from \"../../transport\";\r\nimport {\r\n    IPage,\r\n    IPageAuthor,\r\n    IPageStatus,\r\n    TLang,\r\n} from \"../../entities\";\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { fetchPage, fetchPageAuthor, fetchPageStatusList, updatePage } from \"../../api/page\";\r\n\r\nexport function usePage(pageId: string, lang: TLang = \"ru\"): {\r\n    page?: IPage;\r\n    getPage: () => Promise<void> | undefined;\r\n    statuses: IPageStatus[];\r\n    pageAuthor?: IPageAuthor;\r\n    updatePage: (data: Partial<IPage>) => Promise<void>;\r\n} {\r\n    const [page, setPage] = useState<IPage | undefined>(undefined);\r\n    const [pageAuthor, setPageAuthor] = useState<IPageAuthor | undefined>(undefined);\r\n    const [statuses, setStatuses] = useState<IPageStatus[]>([]);\r\n\r\n    const transport = useMemo(() => new Transport(), []);\r\n    const tokenString = localStorage.getItem(\"token\");\r\n    transport.setToken(JSON.parse(tokenString!));\r\n\r\n    const getPage = useCallback(() => {\r\n        return fetchPage(transport, pageId).then((response) => setPage(response.data));\r\n    }, [pageId, transport]);\r\n\r\n    const getStatuses = useCallback(() => {\r\n        return fetchPageStatusList(transport).then((response) => setStatuses(response.data));\r\n    }, [transport]);\r\n\r\n    const getAuthor = useCallback(() => {\r\n        fetchPageAuthor(transport, pageId).then((response) => setPageAuthor(response.data));\r\n    }, [transport, pageId]);\r\n\r\n    const update = useCallback((data: Partial<IPage>) => {\r\n        return updatePage(transport, pageId, data).then((response) => setPage(response.data));\r\n    }, [transport, pageId]);\r\n\r\n    useEffect(() => {\r\n        if (pageId) {\r\n            getStatuses();\r\n            getPage();\r\n            getAuthor();\r\n        }\r\n    }, [getPage, pageId, getStatuses, getAuthor]);\r\n\r\n    return {page, getPage, statuses, pageAuthor, updatePage: update}\r\n}\r\n","import { Transport } from \"../../transport\";\r\nimport { ICreatePageRequest, ICreatePageResponse, TLang, TResponse } from \"../../entities\";\r\nimport { useCallback, useMemo } from \"react\";\r\nimport { createPage } from \"../../api/page\";\r\n\r\nexport function useCreatePage(\r\n    lang: TLang = \"ru\",\r\n): {\r\n    createPage: (data: ICreatePageRequest) => Promise<TResponse<ICreatePageResponse>>;\r\n} {\r\n    const transport = useMemo(() => new Transport(), []);\r\n    const tokenString = localStorage.getItem(\"token\");\r\n    transport.setToken(JSON.parse(tokenString!));\r\n\r\n    const create = useCallback(\r\n        (data: ICreatePageRequest) => {\r\n            return createPage(transport, data, lang);\r\n        },\r\n        [transport, lang],\r\n    );\r\n\r\n    return { createPage: create };\r\n}\r\n","import React from \"react\";\r\nimport { INavigation } from \"../../entities\";\r\nimport { IconButton, Paper, Typography } from \"@material-ui/core\";\r\nimport { css } from \"emotion\";\r\nimport {\r\n    ArrowForwardIos,\r\n    Delete,\r\n    DragIndicator,\r\n    Edit,\r\n    Visibility,\r\n    VisibilityOff,\r\n} from \"@material-ui/icons\";\r\nimport { DraggableProvidedDraggableProps, DraggableProvidedDragHandleProps } from \"react-beautiful-dnd\";\r\n\r\ninterface INavigationItemProps {\r\n    navigation: INavigation;\r\n    draggableProps: DraggableProvidedDraggableProps;\r\n    dragHandleProps: DraggableProvidedDragHandleProps | null;\r\n\r\n    innerRef(element?: HTMLElement | null): any;\r\n\r\n    onChangeVisibility?(navigation: INavigation): void;\r\n\r\n    onEdit?(id: string): void;\r\n\r\n    onDelete?(id: string): void;\r\n\r\n    onOpenChildren?(id: string): void;\r\n}\r\n\r\nconst styles = {\r\n    item: css`\r\n        display: flex;\r\n        align-items: center;\r\n        width: 500px;\r\n        padding: 5px 10px;\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.12);\r\n        border-radius: 0 !important;\r\n        :first-child {\r\n            border-radius: 4px 4px 0 0 !important;\r\n        }\r\n        :last-child {\r\n            border-radius: 0 0 4px 4px !important;\r\n            border-bottom: none;\r\n        }\r\n    `,\r\n    title: css`\r\n        width: 200px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    `,\r\n    icons: css`\r\n        margin-left: auto;\r\n        display: flex;\r\n        align-items: center;\r\n    `,\r\n    icon: css`\r\n        margin-right: 5px !important;\r\n        :last-child {\r\n            margin-right: 0 !important;\r\n        }\r\n    `,\r\n};\r\n\r\nexport const NavigationItem = (props: INavigationItemProps) => {\r\n    const {\r\n        navigation,\r\n        onChangeVisibility,\r\n        onDelete,\r\n        onEdit,\r\n        onOpenChildren,\r\n        dragHandleProps,\r\n        draggableProps,\r\n        innerRef\r\n    } = props;\r\n\r\n    const handleChangeVisibility = () => {\r\n        if (!onChangeVisibility) {\r\n            return;\r\n        }\r\n        onChangeVisibility(navigation);\r\n    };\r\n\r\n    const handleGetNavigation = () => {\r\n        if (!onEdit) {\r\n            return;\r\n        }\r\n        onEdit(navigation._id);\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        if (!onDelete) {\r\n            return;\r\n        }\r\n        onDelete(navigation._id);\r\n    };\r\n\r\n    const handleOpenChildren = () => {\r\n        if (!onOpenChildren) {\r\n            return;\r\n        }\r\n        onOpenChildren(navigation._id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Paper className={styles.item} ref={innerRef} {...draggableProps}>\r\n                <div {...dragHandleProps}>\r\n                    <IconButton className={styles.icon}>\r\n                        <DragIndicator />\r\n                    </IconButton>\r\n                </div>\r\n                <Typography className={styles.title}>{navigation.title}</Typography>\r\n                <div className={styles.icons}>\r\n                    <IconButton className={styles.icon} onClick={handleChangeVisibility}>\r\n                        {navigation.isVisible ? <Visibility /> : <VisibilityOff />}\r\n                    </IconButton>\r\n                    <IconButton className={styles.icon} onClick={handleGetNavigation}>\r\n                        <Edit />\r\n                    </IconButton>\r\n                    <IconButton className={styles.icon} onClick={handleDelete}>\r\n                        <Delete />\r\n                    </IconButton>\r\n                    {navigation.hasChild && (\r\n                        <IconButton className={styles.icon} onClick={handleOpenChildren}>\r\n                            <ArrowForwardIos />\r\n                        </IconButton>\r\n                    )}\r\n                </div>\r\n            </Paper>\r\n        </>\r\n    );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Dialog, DialogTitle, IconButton, Typography } from \"@material-ui/core\";\r\nimport { css } from \"emotion\";\r\nimport { Close } from \"@material-ui/icons\";\r\n\r\nexport interface IPopupProps {\r\n    title: string;\r\n    open: boolean;\r\n\r\n    onClose?(): void;\r\n}\r\n\r\nconst styles = {\r\n    popup: css`\r\n        min-width: 600px;\r\n    `,\r\n    header: css`\r\n        display: flex;\r\n        width: 100%;\r\n        align-items: center;\r\n        box-sizing: border-box;\r\n        width: 100%;\r\n        padding: 16px 10px 16px 24px !important;\r\n    `,\r\n    title: css`\r\n        width: 400px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    `,\r\n    close: css`\r\n        margin-left: auto !important;\r\n    `\r\n};\r\n\r\nexport const Popup: FC<IPopupProps> = (props) => {\r\n    const { open, title, onClose, children } = props;\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} classes={{paper: styles.popup}}>\r\n            <DialogTitle className={styles.header} disableTypography>\r\n                <Typography variant={\"h6\"} className={styles.title}>{title}</Typography>\r\n                <IconButton onClick={onClose} className={styles.close}>\r\n                    <Close />\r\n                </IconButton>\r\n            </DialogTitle>\r\n            {children}\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Field } from \"formik\";\r\nimport { FieldProps } from \"formik/dist/Field\";\r\nimport {\r\n    Select as MaterialSelect,\r\n    FormControl,\r\n    MenuItem,\r\n    InputLabel,\r\n    FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport * as emotion from \"emotion\";\r\n\r\nexport interface IOption {\r\n    value: string | number;\r\n    label?: string;\r\n\r\n    handler?(): void;\r\n}\r\n\r\ninterface ISelectProps {\r\n    name: string;\r\n    options: IOption[];\r\n    label?: string;\r\n    classes?: object;\r\n}\r\n\r\nconst styles = {\r\n    errorMessage: emotion.css`\r\n        margin: 10px 0 0 0 !important;\r\n        display: flex;\r\n        align-items: center;\r\n    `,\r\n    errorText: emotion.css`\r\n        padding-left: 10px;\r\n    `,\r\n};\r\n\r\nexport const Select = (props: ISelectProps) => {\r\n    const { name, options, label, classes } = props;\r\n    const inputLabel = React.useRef<HTMLLabelElement>(null);\r\n\r\n    const [labelWidth, setLabelWidth] = useState(0);\r\n    useEffect(() => {\r\n        setLabelWidth(inputLabel.current!.offsetWidth);\r\n    }, []);\r\n\r\n    return (\r\n        <Field name={name}>\r\n            {({ field, meta }: FieldProps) => (\r\n                <FormControl variant={\"outlined\"} fullWidth classes={classes} error={!!meta.error}>\r\n                    <InputLabel ref={inputLabel}>{label}</InputLabel>\r\n                    <MaterialSelect labelWidth={labelWidth} {...field}>\r\n                        {options.map((option) => (\r\n                            <MenuItem value={option.value} key={option.value}>\r\n                                {option.label}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </MaterialSelect>\r\n                    {meta.error && (\r\n                        <FormHelperText className={styles.errorMessage}>\r\n                            <ErrorIcon />\r\n                            <span className={styles.errorText}>{meta.error}</span>\r\n                        </FormHelperText>\r\n                    )}\r\n                </FormControl>\r\n            )}\r\n        </Field>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Field } from \"formik\";\r\nimport { FieldProps } from \"formik/dist/Field\";\r\nimport { FormControlLabel, Switch } from \"@material-ui/core\";\r\n\r\ninterface ISwitchFieldProps {\r\n    name: string;\r\n    label?: string;\r\n    color?: \"primary\" | \"default\" | \"secondary\";\r\n    classes?: object;\r\n}\r\n\r\nexport const SwitchField = (props: ISwitchFieldProps) => {\r\n    const { name, color = \"primary\", label, classes } = props;\r\n\r\n    return (\r\n        <Field name={name}>\r\n            {({ field, meta }: FieldProps) => (\r\n                <FormControlLabel\r\n                    classes={classes}\r\n                    control={<Switch color={color} checked={field.value} {...field} />}\r\n                    label={label}\r\n                />\r\n            )}\r\n        </Field>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { INavigation, INavigationType } from \"../../entities\";\r\nimport { Popup } from \"../../components/popup\";\r\nimport { CustomForm } from \"../../components/custom-form\";\r\nimport { css } from \"emotion\";\r\nimport { TextField } from \"../../components/text-field\";\r\nimport { Select } from \"../../components/select\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Save } from \"@material-ui/icons\";\r\nimport { SwitchField } from \"../../components/switch-field\";\r\nimport { isEqual } from \"lodash\";\r\nimport * as Yup from \"yup\";\r\n\r\nexport interface ICreateNavigation {\r\n    title: string;\r\n    navigationTypeId: string;\r\n    hasChild: boolean;\r\n    link: string;\r\n    parentId?: string;\r\n}\r\n\r\ninterface IAddNavigationProps {\r\n    open: boolean;\r\n    navigationsTypes: INavigationType[];\r\n    parentId?: string;\r\n    navigation?: INavigation;\r\n    title?: string;\r\n    isChildren?: boolean;\r\n\r\n    onSubmit?(navigation: ICreateNavigation): void;\r\n\r\n    onClose?(): void;\r\n}\r\n\r\nconst styles = {\r\n    content: css`\r\n        padding: 0 24px 24px 24px;\r\n    `,\r\n    field: css`\r\n        margin: 0 0 30px 0 !important;\r\n        display: flex !important;\r\n    `,\r\n};\r\n\r\nconst ValidationSchema = Yup.object().shape({\r\n    title: Yup.string().required(\"Поле обязательно для заполнения\"),\r\n    navigationTypeId: Yup.string().required(\"Поле обязательно для заполнения\"),\r\n    link: Yup.string().required(\"Поле обязательно для заполнения\"),\r\n});\r\n\r\nexport const NavigationPopup = (props: IAddNavigationProps) => {\r\n    const {\r\n        open,\r\n        navigationsTypes,\r\n        onClose,\r\n        onSubmit,\r\n        navigation,\r\n        title = \"Добавить навигацию\",\r\n        isChildren,\r\n    } = props;\r\n\r\n    const handleSubmit = (data: ICreateNavigation) => {\r\n        if (!onSubmit) {\r\n            return;\r\n        }\r\n        onSubmit(data);\r\n    };\r\n\r\n    return (\r\n        <Popup title={title} open={open} onClose={onClose}>\r\n            <CustomForm<Partial<ICreateNavigation>>\r\n                onSubmit={handleSubmit}\r\n                data={transform(navigation)}\r\n                validationSchema={ValidationSchema}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n                render={(form) => (\r\n                    <div className={styles.content}>\r\n                        <TextField\r\n                            name={\"title\"}\r\n                            label={\"Название\"}\r\n                            classes={{ root: styles.field }}\r\n                        />\r\n                        <Select\r\n                            name={\"navigationTypeId\"}\r\n                            label={\"Тип ссылки\"}\r\n                            options={navigationsTypes.map((item) => ({\r\n                                value: item._id,\r\n                                label: item.title,\r\n                            }))}\r\n                            classes={{ root: styles.field }}\r\n                        />\r\n                        <TextField name={\"link\"} label={\"Ссылка\"} classes={{ root: styles.field }} />\r\n                        {!isChildren && (\r\n                            <SwitchField\r\n                                name={\"hasChild\"}\r\n                                label={\"Второй уровень\"}\r\n                                classes={{ root: styles.field }}\r\n                            />\r\n                        )}\r\n                        <div className={css`display: flex; justify-content: flex-end;`}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<Save />}\r\n                                onClick={form?.submitForm}\r\n                                disabled={!form?.isValid || isEqual(form?.values, form?.initialValues)}\r\n                            >\r\n                                Сохранить\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            />\r\n        </Popup>\r\n    );\r\n};\r\n\r\nexport function transform(navigation?: INavigation): Partial<ICreateNavigation> {\r\n    if (!navigation) {\r\n        return { hasChild: false };\r\n    }\r\n    return { ...navigation, navigationTypeId: navigation.navigationType._id };\r\n}\r\n","import React, { FC } from \"react\";\r\nimport { IPopupProps, Popup } from \"../popup\";\r\nimport { Button, DialogActions } from \"@material-ui/core\";\r\nimport { css } from \"emotion\";\r\n\r\ninterface IConfirmPopupProps extends IPopupProps {\r\n    submitTitle?: string;\r\n    cancelTitle?: string;\r\n\r\n    onSubmit?(): void;\r\n}\r\n\r\nconst styles = {\r\n    button: css`\r\n        margin-right: 20px;\r\n    `,\r\n    actions: css`\r\n        padding: 16px 24px !important;\r\n    `\r\n};\r\n\r\nexport const ConfirmPopup: FC<IConfirmPopupProps> = (props) => {\r\n    const {\r\n        onClose,\r\n        open,\r\n        title,\r\n        onSubmit,\r\n        cancelTitle = \"Отмена\",\r\n        submitTitle = \"Ок\",\r\n    } = props;\r\n    return (\r\n        <Popup open={open} title={title} onClose={onClose}>\r\n            <DialogActions className={styles.actions}>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    onClick={onClose}\r\n                    className={styles.button}\r\n                >\r\n                    {cancelTitle}\r\n                </Button>\r\n                <Button variant=\"outlined\" color={\"primary\"} onClick={onSubmit}>\r\n                    {submitTitle}\r\n                </Button>\r\n            </DialogActions>\r\n        </Popup>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    INavigation, INavigationOrder,\r\n    INavigationType,\r\n    TCreateNavigationRequest,\r\n    TLang,\r\n    TUpdateNavigationRequest, TypeNavigation,\r\n} from \"../../entities\";\r\nimport { css } from \"emotion\";\r\nimport { NavigationItem } from \"../../components/navigation-item\";\r\nimport { Fab, IconButton } from \"@material-ui/core\";\r\nimport { Add, Close } from \"@material-ui/icons\";\r\nimport { ICreateNavigation, NavigationPopup } from \"../add-navigation\";\r\nimport { ConfirmPopup } from \"../../components/confirm-popup\";\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from \"react-beautiful-dnd\";\r\n\r\ninterface INavigationPanelProps {\r\n    navigations: INavigation[];\r\n    navigationTypes: INavigationType[];\r\n    currentNavigation?: INavigation;\r\n    parentId?: string;\r\n    lang: TLang;\r\n    isChildren?: boolean;\r\n    type?: TypeNavigation;\r\n\r\n    createNavigation?(navigation: TCreateNavigationRequest): Promise<void>;\r\n\r\n    updateNavigation?(navigation: TUpdateNavigationRequest): Promise<void>;\r\n\r\n    deleteNavigation?(id: string): Promise<void>;\r\n\r\n    getNavigation?(id: string): Promise<void>;\r\n\r\n    reorderNavigation?(order: INavigationOrder): void;\r\n}\r\n\r\nconst styles = {\r\n    container: css`\r\n        display: flex;\r\n    `,\r\n    wrapper: css`\r\n        width: fit-content;\r\n    `,\r\n    content: css`\r\n        margin-bottom: 20px;\r\n    `,\r\n    children: css`\r\n        margin-left: 20px;\r\n        display: flex;\r\n    `,\r\n    closeChildren: css`\r\n        margin-left: 10px;\r\n        height: fit-content;\r\n    `,\r\n};\r\n\r\nexport const NavigationPanel = (props: INavigationPanelProps) => {\r\n    const {\r\n        currentNavigation,\r\n        navigationTypes = [],\r\n        createNavigation,\r\n        deleteNavigation,\r\n        getNavigation,\r\n        updateNavigation,\r\n        lang,\r\n        isChildren,\r\n        reorderNavigation,\r\n        navigations = [],\r\n        type = \"navigation\"\r\n    } = props;\r\n    const [createOpen, setCreateOpen] = useState(false);\r\n    const [editOpen, setEditOpen] = useState(false);\r\n    const [currentNavigationId, setCurrentNavigationId] = useState<string | undefined>(undefined);\r\n    const [parentId, setParentId] = useState<string | undefined>(undefined);\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [childrenVisible, setChildrenVisible] = useState(false);\r\n    const [children, setChildren] = useState<INavigation[]>([]);\r\n\r\n    useEffect(() => {\r\n        const childItems = navigations.filter((item) => item.parentId === parentId);\r\n        setChildren(childItems);\r\n        // если список потомков открыт и мы выключаем второй уровень у родителя, то список потомков скрывается\r\n        const nav = navigations.find((item) => item._id === parentId);\r\n        if (nav) {\r\n            if (!nav.hasChild) {\r\n                onCloseChildren();\r\n            }\r\n        }\r\n    }, [navigations, parentId]);\r\n\r\n    function onCreateOpen(): void {\r\n        setCreateOpen(true);\r\n    }\r\n\r\n    function onCreateClose(): void {\r\n        setCreateOpen(false);\r\n    }\r\n\r\n    function onEditOpen(): void {\r\n        setEditOpen(true);\r\n    }\r\n\r\n    function onEditClose(): void {\r\n        setEditOpen(false);\r\n    }\r\n\r\n    function onDeleteOpen(): void {\r\n        setDeleteOpen(true);\r\n    }\r\n\r\n    function onDeleteClose(): void {\r\n        setDeleteOpen(false);\r\n    }\r\n\r\n    const data = navigations\r\n        .filter((item) => (item.parentId ? item.parentId === props.parentId : !item.parentId))\r\n        .sort((left, right) => (left.position > right.position ? 1 : -1));\r\n\r\n    const onCreateNavigation = (navigation: ICreateNavigation) => {\r\n        if (!createNavigation) {\r\n            return;\r\n        }\r\n        const navigationType =\r\n            navigationTypes.find((item) => item._id === navigation.navigationTypeId) ||\r\n            navigationTypes[0];\r\n        const nav: TCreateNavigationRequest = {\r\n            ...navigation,\r\n            navigationType,\r\n            parentId: props.parentId,\r\n            isVisible: false,\r\n            lang,\r\n            position: data.length,\r\n            type\r\n        };\r\n        createNavigation(nav).then(onCreateClose);\r\n    };\r\n\r\n    const onChangeVisibility = (navigation: INavigation) => {\r\n        if (!updateNavigation) {\r\n            return;\r\n        }\r\n        navigation.isVisible = !navigation.isVisible;\r\n        updateNavigation({ ...navigation });\r\n    };\r\n\r\n    const onGetNavigation = (id: string) => {\r\n        if (!getNavigation) {\r\n            return;\r\n        }\r\n        getNavigation(id).then(onEditOpen);\r\n    };\r\n\r\n    const onDeleteNavigation = (id: string) => {\r\n        setCurrentNavigationId(id);\r\n        onDeleteOpen();\r\n    };\r\n\r\n    const onUpdateNavigation = (data: ICreateNavigation) => {\r\n        if (!currentNavigation || !updateNavigation) {\r\n            return;\r\n        }\r\n        const type = navigationTypes.find((item) => item._id === data.navigationTypeId);\r\n        currentNavigation.navigationType = type || navigationTypes[0];\r\n        updateNavigation({ ...currentNavigation, ...data, navigationType: type }).then(onEditClose);\r\n    };\r\n\r\n    const confirmDelete = () => {\r\n        if (!deleteNavigation || !currentNavigationId) {\r\n            return;\r\n        }\r\n        deleteNavigation(currentNavigationId).then(() => {\r\n            onDeleteClose();\r\n            if (currentNavigationId === parentId) {\r\n                setChildrenVisible(false);\r\n                setParentId(undefined);\r\n                setChildren([]);\r\n            }\r\n        });\r\n    };\r\n\r\n    const onOpenChildren = (id: string) => {\r\n        setParentId(id);\r\n        const childrenNavigation = navigations.filter((item) => item.parentId === id);\r\n        setChildren(childrenNavigation);\r\n        setChildrenVisible(true);\r\n    };\r\n\r\n    const onCloseChildren = () => {\r\n        setChildrenVisible(false);\r\n        setParentId(undefined);\r\n        setChildren([]);\r\n    };\r\n\r\n    const onDragEnd = (result: DropResult) => {\r\n        if (!result.destination || !reorderNavigation) {\r\n            return;\r\n        }\r\n        const id = data[result.source.index]._id;\r\n        reorderNavigation({_id: id, position: result.destination.index, parentId: props.parentId});\r\n    };\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.wrapper}>\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    <Droppable droppableId={\"navigation\"} direction={\"vertical\"}>\r\n                        {(provided) => (\r\n                            <div\r\n                                className={styles.content}\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}\r\n                            >\r\n                                {data.map((item, index) => (\r\n                                    <Draggable index={index} draggableId={item._id} key={item._id}>\r\n                                        {(provided) => (\r\n                                            <NavigationItem\r\n                                                innerRef={provided.innerRef}\r\n                                                draggableProps={provided.draggableProps}\r\n                                                dragHandleProps={provided.dragHandleProps}\r\n                                                navigation={item}\r\n                                                key={item._id}\r\n                                                onChangeVisibility={onChangeVisibility}\r\n                                                onEdit={onGetNavigation}\r\n                                                onDelete={onDeleteNavigation}\r\n                                                onOpenChildren={onOpenChildren}\r\n                                            />\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n                <Fab color=\"primary\" aria-label=\"add\" onClick={onCreateOpen}>\r\n                    <Add />\r\n                </Fab>\r\n                <NavigationPopup\r\n                    open={createOpen}\r\n                    navigationsTypes={navigationTypes}\r\n                    onClose={onCreateClose}\r\n                    onSubmit={onCreateNavigation}\r\n                    isChildren={isChildren}\r\n                />\r\n                <NavigationPopup\r\n                    navigation={currentNavigation}\r\n                    open={editOpen}\r\n                    navigationsTypes={navigationTypes}\r\n                    onClose={onEditClose}\r\n                    onSubmit={onUpdateNavigation}\r\n                    title={\"Редактировать навигацию\"}\r\n                    isChildren={isChildren}\r\n                />\r\n                <ConfirmPopup\r\n                    open={deleteOpen}\r\n                    onClose={onDeleteClose}\r\n                    title={`Удалить навигацию \"${\r\n                        navigations.find((item) => item._id === currentNavigationId)?.title\r\n                    }\"?`}\r\n                    submitTitle={\"Удалить\"}\r\n                    onSubmit={confirmDelete}\r\n                />\r\n            </div>\r\n            {childrenVisible && (\r\n                <div className={styles.children}>\r\n                    <NavigationPanel\r\n                        navigations={children}\r\n                        currentNavigation={currentNavigation}\r\n                        navigationTypes={navigationTypes}\r\n                        lang={lang}\r\n                        parentId={parentId}\r\n                        deleteNavigation={deleteNavigation}\r\n                        createNavigation={createNavigation}\r\n                        getNavigation={getNavigation}\r\n                        updateNavigation={updateNavigation}\r\n                        isChildren\r\n                        reorderNavigation={reorderNavigation}\r\n                        type={type}\r\n                    />\r\n                    <IconButton className={styles.closeChildren} onClick={onCloseChildren}>\r\n                        <Close />\r\n                    </IconButton>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { TLang, TypeNavigation } from \"../../../entities\";\r\nimport { useNavigation } from \"../../../hooks\";\r\nimport { NavigationPanel } from \"../../../widgets/navigation-panel\";\r\n\r\ninterface INavigationContentProps {\r\n    lang: TLang;\r\n    type: TypeNavigation;\r\n}\r\n\r\nexport const NavigationContent = (props: INavigationContentProps) => {\r\n    const { lang, type } = props;\r\n    const {\r\n        navigations,\r\n        navigation,\r\n        navigationTypes,\r\n        reorderNavigation,\r\n        deleteNavigation,\r\n        updateNavigation,\r\n        createNavigation,\r\n        getNavigation,\r\n    } = useNavigation(lang, type);\r\n\r\n    return (\r\n        <NavigationPanel\r\n            lang={lang}\r\n            navigations={navigations}\r\n            currentNavigation={navigation}\r\n            navigationTypes={navigationTypes}\r\n            deleteNavigation={deleteNavigation}\r\n            createNavigation={createNavigation}\r\n            getNavigation={getNavigation}\r\n            updateNavigation={updateNavigation}\r\n            reorderNavigation={reorderNavigation}\r\n            type={type}\r\n        />\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Paper, Tab, Tabs } from \"@material-ui/core\";\r\nimport { NavigationContent } from \"./navigation-content\";\r\nimport { css } from \"emotion\";\r\n\r\ninterface INavigationProps {\r\n    setPageTitle(title: string): void;\r\n}\r\n\r\nconst styles = {\r\n    wrapper: css`\r\n        margin-top: 20px;\r\n    `,\r\n};\r\n\r\nexport const Navigation = (props: INavigationProps) => {\r\n    const { setPageTitle } = props;\r\n\r\n    useEffect(() => setPageTitle(\"Навигация\"), [setPageTitle]);\r\n\r\n    const [value, setValue] = useState(0);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper>\r\n                <Tabs\r\n                    variant=\"fullWidth\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"secondary\"\r\n                >\r\n                    <Tab label=\"Русский сайт\" />\r\n                    <Tab label=\"Английский сайт\" />\r\n                </Tabs>\r\n            </Paper>\r\n            <div className={styles.wrapper}>\r\n                {value === 0 && <NavigationContent lang={\"ru\"} type={\"navigation\"} />}\r\n                {value === 1 && <NavigationContent lang={\"en\"} type={\"navigation\"} />}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Paper, Tab, Tabs } from \"@material-ui/core\";\r\nimport { NavigationContent } from \"../navigation/navigation-content\";\r\nimport { css } from \"emotion\";\r\n\r\ninterface IFooterProps {\r\n    setPageTitle(title: string): void;\r\n}\r\n\r\nconst styles = {\r\n    wrapper: css`\r\n        margin-top: 20px;\r\n    `,\r\n};\r\n\r\nexport const Footer = (props: IFooterProps) => {\r\n    const { setPageTitle } = props;\r\n\r\n    useEffect(() => setPageTitle(\"Футер\"), [setPageTitle]);\r\n\r\n    const [value, setValue] = useState(0);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper>\r\n                <Tabs\r\n                    variant=\"fullWidth\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"secondary\"\r\n                >\r\n                    <Tab label=\"Русский сайт\" />\r\n                    <Tab label=\"Английский сайт\" />\r\n                </Tabs>\r\n            </Paper>\r\n            <div className={styles.wrapper}>\r\n                {value === 0 && (\r\n                    <NavigationContent\r\n                        lang={\"ru\"}\r\n                        type={\"footer\"}\r\n                    />\r\n                )}\r\n                {value === 1 && (\r\n                    <NavigationContent\r\n                        lang={\"en\"}\r\n                        type={\"footer\"}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Divider, Drawer, List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { adminSidebarLinks, sidebarLinks } from \"../../config\";\r\nimport { AppContext } from \"../../context\";\r\nimport * as emotion from \"emotion\";\r\n\r\nconst styles = {\r\n    drawer: emotion.css`\r\n        width: 300px;\r\n    `,\r\n    drawerPaper: emotion.css`\r\n        width: 300px;\r\n    `,\r\n    toolbar: emotion.css`\r\n        width: 100%;\r\n        height: 64px;\r\n    `,\r\n    childrenNav: emotion.css`\r\n        padding-left: 40px !important;\r\n    `,\r\n};\r\n\r\nexport const Sidebar = () => {\r\n    return (\r\n        <Drawer\r\n            variant={\"permanent\"}\r\n            anchor={\"left\"}\r\n            className={styles.drawer}\r\n            classes={{\r\n                paper: styles.drawerPaper,\r\n            }}\r\n        >\r\n            <div className={styles.toolbar} />\r\n            <Divider />\r\n            <List>\r\n                {sidebarLinks.map((item, key) => (\r\n                    <ListItem\r\n                        button\r\n                        key={key}\r\n                        onClick={() => AppContext.getHistory().push(item.link)}\r\n                    >\r\n                        <ListItemText primary={item.title} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                {adminSidebarLinks.map((item, key) => (\r\n                    <ListItem\r\n                        button\r\n                        key={key}\r\n                        onClick={() => AppContext.getHistory().push(item.link)}\r\n                    >\r\n                        <ListItemText primary={item.title} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Menu as MaterialMenu, MenuItem } from \"@material-ui/core\";\r\nimport { IOption } from \"../select\";\r\n\r\ninterface IMenuProps {\r\n    anchor: HTMLElement | null;\r\n    open: boolean;\r\n    options: IOption[];\r\n\r\n    onClose?(): void;\r\n}\r\n\r\nexport const Menu = (props: IMenuProps) => {\r\n    const { anchor, onClose, open, options = [] } = props;\r\n\r\n    return (\r\n        <MaterialMenu\r\n            open={open}\r\n            anchorEl={anchor}\r\n            onClose={onClose}\r\n            anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n            }}\r\n            keepMounted\r\n            transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n            }}\r\n        >\r\n            {options.map((item, index) => (\r\n                <MenuItem onClick={item.handler} key={index}>\r\n                    {item.value}\r\n                </MenuItem>\r\n            ))}\r\n        </MaterialMenu>\r\n    );\r\n};\r\n","import React, { FC, useState } from \"react\";\r\nimport * as emotion from \"emotion\";\r\nimport {\r\n    AppBar,\r\n    Avatar,\r\n    IconButton,\r\n    Toolbar,\r\n    Tooltip,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { IUser } from \"../../entities\";\r\nimport { AccountCircle } from \"@material-ui/icons\";\r\nimport { AppContext } from \"../../context\";\r\nimport Helmet from \"react-helmet\";\r\nimport { ConfirmPopup } from \"../../components/confirm-popup\";\r\nimport { Sidebar } from \"../sidebar\";\r\nimport { Menu } from \"../../components/menu\";\r\n\r\ninterface ILayoutProps {\r\n    title: string;\r\n    user?: IUser;\r\n\r\n    onLogout?(): void;\r\n}\r\n\r\nconst styles = {\r\n    root: emotion.css`\r\n        display: flex;\r\n    `,\r\n    appBar: emotion.css`\r\n        width: calc(100% - 300px) !important;\r\n        margin-left: 300px;\r\n    `,\r\n    content: emotion.css`\r\n        width: calc(100% - 300px) !important;\r\n        height: calc(100vh - 64px);\r\n        margin-top: 64px;\r\n        box-sizing: border-box;\r\n        overflow-y: auto;\r\n        padding: 24px;\r\n        background: #f5f5f5;\r\n    `,\r\n    avatarIcon: emotion.css`\r\n        margin-left: auto !important;\r\n    `,\r\n    drawer: emotion.css`\r\n        width: 300px;\r\n    `,\r\n    drawerPaper: emotion.css`\r\n        width: 300px;\r\n    `,\r\n    toolbar: emotion.css`\r\n        width: 100%;\r\n        height: 64px;\r\n    `,\r\n    childrenNav: emotion.css`\r\n        padding-left: 40px !important;\r\n    `,\r\n};\r\n\r\nexport const Layout: FC<ILayoutProps> = (props) => {\r\n    const { title, children, user, onLogout } = props;\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const isMenuOpen = Boolean(anchorEl);\r\n    const [logoutPopupVisible, setLogoutPopupVisible] = useState(false);\r\n\r\n    function onOpenLogoutPopup(): void {\r\n        setLogoutPopupVisible(true);\r\n    }\r\n\r\n    function onCloseLogoutPopup(): void {\r\n        setLogoutPopupVisible(false);\r\n    }\r\n\r\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const logout = () => {\r\n        handleMenuClose();\r\n        if (onLogout) {\r\n            onLogout();\r\n        }\r\n    };\r\n\r\n    const goToProfile = () => {\r\n        AppContext.getHistory().push(\"/panel/profile\");\r\n        handleMenuClose();\r\n    };\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <Helmet>\r\n                <title>{title}</title>\r\n            </Helmet>\r\n            <AppBar position={\"fixed\"} className={styles.appBar} color={\"primary\"}>\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        {title}\r\n                    </Typography>\r\n                    <Tooltip title={user?.login || user?.email || \"\"}>\r\n                        <IconButton\r\n                            onClick={handleProfileMenuOpen}\r\n                            color={\"inherit\"}\r\n                            className={styles.avatarIcon}\r\n                        >\r\n                            {user?.avatar ? <Avatar src={user?.avatar} /> : <AccountCircle />}\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Menu\r\n                        anchor={anchorEl}\r\n                        open={isMenuOpen}\r\n                        onClose={handleMenuClose}\r\n                        options={[\r\n                            {\r\n                                value: \"Профиль\",\r\n                                handler: goToProfile,\r\n                            },\r\n                            {\r\n                                value: \"Выход\",\r\n                                handler: onOpenLogoutPopup,\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Sidebar />\r\n            <div className={styles.content}>{children}</div>\r\n            <ConfirmPopup\r\n                title={\"Вы действительно хотите выйти?\"}\r\n                submitTitle={\"Выйти\"}\r\n                open={logoutPopupVisible}\r\n                onClose={onCloseLogoutPopup}\r\n                onSubmit={logout}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { css } from \"emotion\";\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\n\r\ninterface ICardProps {\r\n    title: string;\r\n}\r\n\r\nconst styles = {\r\n    card: css`\r\n        padding: 24px\r\n    `,\r\n    content: css`\r\n        margin-top: 20px;\r\n    `\r\n};\r\n\r\nexport const Card: FC<ICardProps> = (props) => {\r\n    const { title, children } = props;\r\n    return (\r\n        <Paper className={styles.card} elevation={3}>\r\n            <Typography variant={\"h6\"}>{title}</Typography>\r\n            <div className={styles.content}>{children}</div>\r\n        </Paper>\r\n    );\r\n};\r\n","/** @jsx jsx */\r\n\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { IconButton, Snackbar as MaterialSnackbar, SnackbarContent } from \"@material-ui/core\";\r\nimport {\r\n    CheckCircle as CheckCircleIcon,\r\n    Close as CloseIcon,\r\n    Error as ErrorIcon,\r\n} from \"@material-ui/icons\";\r\nimport * as React from \"react\";\r\nimport { green, red } from \"@material-ui/core/colors\";\r\n\r\ninterface ISnackbarProps {\r\n    message: string;\r\n    open: boolean;\r\n    error: boolean;\r\n\r\n    onClose?(event?: React.SyntheticEvent, reason?: string): void;\r\n}\r\n\r\nexport const Snackbar: React.FC<ISnackbarProps> = ({ message, error, open, onClose }) => {\r\n    return (\r\n        <MaterialSnackbar\r\n            anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"right\",\r\n            }}\r\n            open={open}\r\n            autoHideDuration={5000}\r\n            onClose={onClose}\r\n        >\r\n            <SnackbarContent\r\n                css={css({\r\n                    background: error ?  red[600] : green[600],\r\n                    boxShadow: `0 4px 8px ${error ? red[600] : green[600]}`,\r\n                })}\r\n                message={\r\n                    <span\r\n                        css={{\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                        }}\r\n                    >\r\n                        {error ? (\r\n                            <ErrorIcon />\r\n                        ) : (\r\n                            <CheckCircleIcon />\r\n                        )}\r\n                        <span css={css`padding-left: 12px`}>{message}</span>\r\n                    </span>\r\n                }\r\n                action={[\r\n                    <IconButton key=\"close\" color=\"inherit\" onClick={onClose}>\r\n                        <CloseIcon />\r\n                    </IconButton>,\r\n                ]}\r\n            />\r\n        </MaterialSnackbar>\r\n    );\r\n};\r\n\r\nSnackbar.displayName = \"Snackbar\";\r\n","import React, { useState } from \"react\";\r\nimport { IChangePasswordData } from \"../../entities\";\r\nimport { Button, IconButton, TextField as MaterialTextField, Typography } from \"@material-ui/core\";\r\nimport { css } from \"emotion\";\r\nimport { Edit, Save } from \"@material-ui/icons\";\r\nimport { CustomForm } from \"../../components/custom-form\";\r\nimport { Popup } from \"../../components/popup\";\r\nimport { TextField } from \"../../components/text-field\";\r\nimport * as Yup from \"yup\";\r\nimport { StringSchema } from \"yup\";\r\n\r\ninterface IChangePasswordProps {\r\n    error?: string;\r\n\r\n    onSubmit?(data: IChangePasswordData): void;\r\n}\r\n\r\nexport const styles = {\r\n    wrapper: css`\r\n        display: flex;\r\n    `,\r\n    editButton: css`\r\n        margin-left: 20px !important;\r\n    `,\r\n    formWrapper: css`\r\n        padding: 0 24px 24px 24px;\r\n    `,\r\n    field: css`\r\n        margin-bottom: 20px !important;\r\n    `,\r\n};\r\n\r\nfunction equalTo(ref: any, msg: any): StringSchema {\r\n    return Yup.string().test({\r\n        name: \"equalTo\",\r\n        exclusive: false,\r\n        message: msg,\r\n        params: {\r\n            reference: ref.path,\r\n        },\r\n        test: function(value: any) {\r\n            return value === this.resolve(ref);\r\n        },\r\n    });\r\n}\r\n\r\nYup.addMethod(Yup.string, \"equalTo\", equalTo);\r\n\r\nconst ValidationSchema = Yup.object().shape({\r\n    currentPassword: Yup.string()\r\n        .min(6, \"Пароль должен сожержать минимум 6 символов\")\r\n        .required(\"Поле обязательно для заполнения\"),\r\n    newPassword: Yup.string()\r\n        .equalTo(Yup.ref(\"repeatPassword\"), \"Новый пароль и повтор пароля должны совпадать\")\r\n        .min(6, \"Пароль должен сожержать минимум 6 символов\")\r\n        .required(\"Поле обязательно для заполнения\"),\r\n    repeatPassword: Yup.string()\r\n        .equalTo(Yup.ref(\"newPassword\"), \"Новый пароль и повтор пароля должны совпадать\")\r\n        .min(6, \"Пароль должен сожержать минимум 6 символов\")\r\n        .required(\"Поле обязательно для заполнения\"),\r\n});\r\n\r\nexport const ChangePassword = (props: IChangePasswordProps) => {\r\n    const { error, onSubmit } = props;\r\n    const [popupVisible, setPopupVisible] = useState(false);\r\n\r\n    function onPopupOpen(): void {\r\n        setPopupVisible(true);\r\n    }\r\n\r\n    function onPopupClose(): void {\r\n        setPopupVisible(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.wrapper}>\r\n                <MaterialTextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    label={\"Пароль\"}\r\n                    type={\"password\"}\r\n                    value={\"********\"}\r\n                    disabled\r\n                />\r\n                <IconButton color={\"primary\"} onClick={onPopupOpen}>\r\n                    <Edit />\r\n                </IconButton>\r\n            </div>\r\n            <Popup open={popupVisible} title={\"Сменить пароль\"} onClose={onPopupClose}>\r\n                <CustomForm<IChangePasswordData>\r\n                    validationSchema={ValidationSchema}\r\n                    onSubmit={onSubmit}\r\n                    render={(form) => (\r\n                        <div className={styles.formWrapper}>\r\n                            <TextField\r\n                                name={\"currentPassword\"}\r\n                                label={\"Текущий пароль\"}\r\n                                classes={{ root: styles.field }}\r\n                                type={\"password\"}\r\n                                error={!!error}\r\n                            />\r\n                            <TextField\r\n                                name={\"newPassword\"}\r\n                                label={\"Новый пароль\"}\r\n                                classes={{ root: styles.field }}\r\n                                type={\"password\"}\r\n                                error={!!error}\r\n                            />\r\n                            <TextField\r\n                                name={\"repeatPassword\"}\r\n                                label={\"Повторите пароль\"}\r\n                                classes={{ root: styles.field }}\r\n                                type={\"password\"}\r\n                                error={!!error}\r\n                            />\r\n                            {error && (\r\n                                <Typography\r\n                                    color={\"error\"}\r\n                                    align={\"center\"}\r\n                                    className={styles.field}\r\n                                >\r\n                                    {error}\r\n                                </Typography>\r\n                            )}\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<Save />}\r\n                                onClick={form?.submitForm}\r\n                                disabled={!form?.isValid}\r\n                            >\r\n                                Сохранить\r\n                            </Button>\r\n                        </div>\r\n                    )}\r\n                />\r\n            </Popup>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { IUser } from \"../../entities\";\r\nimport { TextField } from \"../../components/text-field\";\r\nimport cn from \"classnames\";\r\nimport { Button, IconButton, Tooltip } from \"@material-ui/core\";\r\nimport { Info, Save } from \"@material-ui/icons\";\r\nimport { isEqual } from \"lodash\";\r\nimport { CustomForm } from \"../../components/custom-form\";\r\nimport * as Yup from \"yup\";\r\nimport { css } from \"emotion\";\r\n\r\ninterface IUpdateFormProps {\r\n    user?: IUser;\r\n    error?: string;\r\n\r\n    onSubmit?(data: IUser): void;\r\n}\r\n\r\nconst ValidationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email(\"Невалидный e-mail\")\r\n        .required(\"Поле обязательно для заполнения\"),\r\n    login: Yup.string()\r\n        .required(\"Поле обязательно для заполнения\")\r\n        .min(2, \"Минимальная длина логина 2 символа\"),\r\n});\r\n\r\nconst classes = {\r\n    field: css`\r\n        margin-bottom: 20px !important;\r\n    `,\r\n    emailWrapper: css`\r\n        display: flex;\r\n        align-items: center;\r\n    `,\r\n    info: css`\r\n        margin-left: 20px;\r\n    `,\r\n};\r\n\r\nexport const UpdateUserForm = (props: IUpdateFormProps) => {\r\n    const { user, error, onSubmit } = props;\r\n\r\n    return (\r\n        <CustomForm<IUser>\r\n            data={user}\r\n            onSubmit={onSubmit}\r\n            validationSchema={ValidationSchema}\r\n            render={(form) => (\r\n                <>\r\n                    <TextField\r\n                        name={\"login\"}\r\n                        label={\"Логин\"}\r\n                        classes={{\r\n                            root: classes.field,\r\n                        }}\r\n                        InputLabelProps={{ shrink: !!form?.values?.login }}\r\n                    />\r\n                    <div className={cn(classes.emailWrapper, classes.field)}>\r\n                        <TextField\r\n                            name={\"email\"}\r\n                            label={\"E-mail\"}\r\n                            InputLabelProps={{\r\n                                shrink: !!form?.values?.email,\r\n                            }}\r\n                        />\r\n                        <Tooltip\r\n                            title={\r\n                                \"Если Вы смените E-mail, то Вам нужно будет подвердить новый E-mail, и после смены E-mail'a Вы будете разлогинены\"\r\n                            }\r\n                            className={classes.info}\r\n                        >\r\n                            <IconButton>\r\n                                <Info color={\"primary\"} />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </div>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<Save />}\r\n                        onClick={form?.submitForm}\r\n                        disabled={isEqual(form?.values, form?.initialValues)}\r\n                    >\r\n                        Сохранить\r\n                    </Button>\r\n                </>\r\n            )}\r\n        />\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { css } from \"emotion\";\r\nimport cn from \"classnames\";\r\n\r\nconst DEFAULT = require(\"./user.svg\");\r\n\r\ninterface IAvatarProps {\r\n    url?: string;\r\n    name?: string\r\n    className?: string;\r\n}\r\n\r\nconst styles = {\r\n    wrapper: css`\r\n        width: 200px;\r\n        height: 200px;\r\n        overflow: hidden;\r\n        border-radius: 50%;\r\n    `,\r\n    image: css`\r\n        width: 100%;\r\n        height: 100%;\r\n    `\r\n};\r\n\r\nexport const Avatar = (props: IAvatarProps) => {\r\n    const { url, name, className } = props;\r\n    return (\r\n        <div className={cn(styles.wrapper, className)}>\r\n            <img src={url || DEFAULT} alt={name} className={styles.image}/>\r\n        </div>\r\n    );\r\n};\r\n","import React, { ChangeEvent, useEffect, useRef, useState } from \"react\";\r\nimport { css } from \"emotion\";\r\nimport { Button, IconButton, LinearProgress, Typography } from \"@material-ui/core\";\r\nimport { Close, CloudUpload, Edit } from \"@material-ui/icons\";\r\nimport { Avatar } from \"../../components/avatar\";\r\nimport { ConfirmPopup } from \"../../components/confirm-popup\";\r\nimport { useFile } from \"../../hooks\";\r\n\r\ninterface IUploadAvatarProps {\r\n    src?: string;\r\n    loading?: boolean;\r\n\r\n    onDeleteAvatar?(): void;\r\n\r\n    uploadAvatar?(file: File): void;\r\n}\r\n\r\nconst styles = {\r\n    wrapper: css`\r\n        position: relative;\r\n        padding-top: 40px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n    `,\r\n    icons: css`\r\n        position: absolute !important;\r\n        right: 0;\r\n        top: 0;\r\n    `,\r\n    icon: css`\r\n        margin-right: 10px;\r\n        :last-child {\r\n            margin-right: 0;\r\n        }\r\n    `,\r\n    avatar: css`\r\n        margin-bottom: 20px;\r\n    `,\r\n    button: css`\r\n        width: 100%;\r\n    `,\r\n    input: css`\r\n        display: none;\r\n    `,\r\n    progress: css`\r\n        width: 100%;\r\n        margin-top: 20px;\r\n    `,\r\n    error: css`\r\n        margin-top: 20px !important;\r\n    `\r\n};\r\n\r\nexport const UploadAvatar = (props: IUploadAvatarProps) => {\r\n    const { onDeleteAvatar, uploadAvatar, loading } = props;\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const { src, file, error, setSrc, deleteFile, loadFile } = useFile({\r\n        whiteList: [\"png\", \"jpg\", \"pdf\", \"gif\", \"jpeg\"],\r\n        maxFileSize: 1048576,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setSrc(props.src);\r\n    }, [props.src, setSrc]);\r\n\r\n    function onModalOpen(): void {\r\n        setModalOpen(true);\r\n    }\r\n\r\n    function onModalClose(): void {\r\n        setModalOpen(false);\r\n    }\r\n\r\n    const onChoseFile = () => {\r\n        if (!inputRef.current) {\r\n            return;\r\n        }\r\n        inputRef.current.click();\r\n    };\r\n\r\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target.files?.item(0);\r\n        if (!file) {\r\n            return;\r\n        }\r\n        loadFile(file);\r\n    };\r\n\r\n    const deleteAvatar = () => {\r\n        deleteFile();\r\n        onModalClose();\r\n        if (onDeleteAvatar) {\r\n            onDeleteAvatar();\r\n        }\r\n    };\r\n\r\n    const onUploadAvatar = () => {\r\n        if (!uploadAvatar || !file) {\r\n            return;\r\n        }\r\n        uploadAvatar(file);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.wrapper}>\r\n                <div className={styles.icons}>\r\n                    <IconButton className={styles.icon} onClick={onChoseFile}>\r\n                        <Edit />\r\n                    </IconButton>\r\n                    {src && (\r\n                        <IconButton className={styles.icon} onClick={onModalOpen}>\r\n                            <Close />\r\n                        </IconButton>\r\n                    )}\r\n                </div>\r\n                <Avatar url={src} className={styles.avatar} />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<CloudUpload />}\r\n                    className={styles.button}\r\n                    onClick={onUploadAvatar}\r\n                    disabled={loading}\r\n                >\r\n                    Загрузить\r\n                </Button>\r\n                {error && (\r\n                    <Typography color={\"error\"} align={\"center\"} className={styles.error}>\r\n                        {error}\r\n                    </Typography>\r\n                )}\r\n                <input type=\"file\" className={styles.input} ref={inputRef} onChange={onChange} />\r\n            </div>\r\n            {loading && <LinearProgress className={styles.progress} />}\r\n            <ConfirmPopup\r\n                title={\"Вы действительно хотите удалить аватар?\"}\r\n                submitTitle={\"Удалить\"}\r\n                open={modalOpen}\r\n                onClose={onModalClose}\r\n                onSubmit={deleteAvatar}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import { Dispatch, SetStateAction, useState } from \"react\";\r\nimport { fromEvent } from \"rxjs/internal/observable/fromEvent\";\r\nimport { dataURLtoFile, getExtension, getUnsafeExtension } from \"../utils\";\r\n\r\nexport interface IFileServiceParams {\r\n    maxFileSize: number;\r\n    whiteList: string[];\r\n}\r\n\r\nexport function useFile(\r\n    params: IFileServiceParams,\r\n): {\r\n    file?: File;\r\n    src?: string;\r\n    setSrc: Dispatch<SetStateAction<string | undefined>>\r\n    error?: string;\r\n    loadFile: (file: File) => void;\r\n    deleteFile: () => void;\r\n} {\r\n    const [file, setFile] = useState<File | undefined>(undefined);\r\n    const [src, setSrc] = useState<string | undefined>(undefined);\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n\r\n    const loadFile = async (f: File) => {\r\n        if (!!(await getError(f))) {\r\n            setError(await getError(f));\r\n            return;\r\n        }\r\n        setError(undefined);\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(f);\r\n        fromEvent(reader, \"loadend\").subscribe(async () => {\r\n            try {\r\n                setSrc(reader.result as string);\r\n                setFile(dataURLtoFile(reader.result as string, f.name));\r\n            } catch (error) {\r\n                // Nothing here\r\n            }\r\n        });\r\n    };\r\n\r\n    const getError = async (file: File): Promise<string | undefined> => {\r\n        if (file.size > params.maxFileSize) {\r\n            return `Размер файла не должен превышать ${params.maxFileSize / (1024 * 1024)}МБ !`;\r\n        }\r\n        const ext = await new Promise((resolve: (ext: string) => void) =>\r\n            getExtension(resolve, file),\r\n        );\r\n        if (params.whiteList.indexOf(ext) < 0) {\r\n            return \"Тип файла не соответствует его расширению. Пожалуйста, повторите попытку.\";\r\n        }\r\n        if (getUnsafeExtension(file) !== ext) {\r\n            return \"Файл этого типа не может быть загружен\";\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    const deleteFile = () => {\r\n        setSrc(undefined);\r\n        setFile(undefined);\r\n        setError(undefined);\r\n    };\r\n\r\n    return { file, src, error, loadFile, deleteFile, setSrc };\r\n}\r\n","import React from \"react\";\r\nimport { css } from \"emotion\";\r\nimport { Popup } from \"../../components/popup\";\r\nimport { CustomForm } from \"../../components/custom-form\";\r\nimport { TextField } from \"../../components/text-field\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport * as Yup from \"yup\";\r\nimport { Save } from \"@material-ui/icons\";\r\n\r\ninterface ICreatePagePopupProps {\r\n    visible: boolean;\r\n    error?: string;\r\n\r\n    onClose?(): void;\r\n\r\n    onSubmit?(data: { title: string }): void;\r\n}\r\n\r\nconst classNames = {\r\n    wrapper: css`\r\n        padding: 0 24px 24px 24px;\r\n    `,\r\n    field: css`\r\n        margin-bottom: 30px !important;\r\n    `,\r\n};\r\n\r\nconst ValidationSchema = Yup.object().shape({\r\n    title: Yup.string().required(\"Поле обязательно для заполнения\"),\r\n});\r\n\r\nexport const CreatePagePopup = (props: ICreatePagePopupProps) => {\r\n    const { visible, onClose, onSubmit, error } = props;\r\n\r\n    return (\r\n        <Popup title={\"Добавить страницу\"} open={visible} onClose={onClose}>\r\n            <CustomForm<{ title: string }>\r\n                onSubmit={onSubmit}\r\n                validationSchema={ValidationSchema}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n                render={(form) => (\r\n                    <div className={classNames.wrapper}>\r\n                        <TextField\r\n                            name={\"title\"}\r\n                            classes={{ root: classNames.field }}\r\n                            label={\"Название страницы\"}\r\n                        />\r\n                        {error && (\r\n                            <Typography\r\n                                color={\"error\"}\r\n                                align={\"center\"}\r\n                                className={classNames.field}\r\n                            >\r\n                                {error}\r\n                            </Typography>\r\n                        )}\r\n                        <div className={css`display: flex; justify-content: flex-end;`}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<Save />}\r\n                                onClick={form?.submitForm}\r\n                                disabled={!form?.isValid}\r\n                            >\r\n                                Сохранить\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            />\r\n        </Popup>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { css } from \"emotion\";\r\nimport { Chip, Divider, Grid, Typography } from \"@material-ui/core\";\r\nimport { useSnackbar, useUser } from \"../../hooks\";\r\nimport { Card } from \"../../components/card\";\r\nimport { Snackbar } from \"../../components/snackbar\";\r\nimport { IChangePasswordData, IUser } from \"../../entities\";\r\nimport { UpdateUserForm, ChangePassword, UploadAvatar } from \"../../widgets\";\r\nimport { getServerError } from \"../../utils\";\r\n\r\ninterface IProfileProps {\r\n    setPageTitle(title: string): void;\r\n\r\n    onSetUser?(user?: IUser): void;\r\n}\r\n\r\nconst classes = {\r\n    wrapper: css`\r\n        width: 100%;\r\n        display: flex;\r\n    `,\r\n    left: css`\r\n        padding-right: 24px;\r\n    `,\r\n};\r\n\r\nexport const Profile = (props: IProfileProps) => {\r\n    const { setPageTitle, onSetUser } = props;\r\n    const { user, updateUser, deleteUser, updateAvatar, updatePassword, deleteAvatar } = useUser();\r\n    const { error, snackbar, setSnackbarError, setSnackbarState, onSnackbarClose } = useSnackbar();\r\n    const [avatarLoaderVisible, setAvatarLoaderVisible] = useState(false);\r\n    const [passwordError, setPasswordError] = useState<string | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        setPageTitle(`Профиль пользователя ${user?.login || user?.email}`);\r\n    }, [setPageTitle, user]);\r\n\r\n    useEffect(() => {\r\n        if (!onSetUser) {\r\n            return;\r\n        }\r\n        onSetUser(user);\r\n    }, [user, onSetUser]);\r\n\r\n    const onUploadAvatar = (file: File) => {\r\n        setAvatarLoaderVisible(true);\r\n        updateAvatar({ avatar: file }).then(() => {\r\n            setAvatarLoaderVisible(false);\r\n        });\r\n    };\r\n\r\n    const onDeleteAvatar = () => {\r\n        setAvatarLoaderVisible(true);\r\n        deleteAvatar().then(() => {\r\n            setAvatarLoaderVisible(false);\r\n        });\r\n    };\r\n\r\n    const onUpdateUser = (user: Partial<IUser>) => {\r\n        updateUser(user)\r\n            .then(() => setSnackbarState({ open: true, message: \"Логин изменен!\" }))\r\n            .catch(() => {\r\n                setSnackbarError(true);\r\n                setSnackbarState({ open: true, message: \"Ошибка сервера\" });\r\n            });\r\n    };\r\n\r\n    const onUpdatePassword = (data: IChangePasswordData) => {\r\n        setPasswordError(undefined);\r\n        updatePassword(data)\r\n            .then(() => setSnackbarState({ open: true, message: \"Пароль изменен!\" }))\r\n            .catch((error) => {\r\n                const serverError = getServerError(error);\r\n                if (!serverError) {\r\n                    return;\r\n                }\r\n                setPasswordError(serverError.title);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={2} className={classes.left}>\r\n                    <UploadAvatar\r\n                        src={user?.avatar}\r\n                        loading={avatarLoaderVisible}\r\n                        uploadAvatar={onUploadAvatar}\r\n                        onDeleteAvatar={onDeleteAvatar}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    <Grid container>\r\n                        <Grid\r\n                            item\r\n                            xs={6}\r\n                            className={css`\r\n                                padding-right: 24px;\r\n                            `}\r\n                        >\r\n                            <Card title={\"Личная информация\"}>\r\n                                <UpdateUserForm user={user} onSubmit={onUpdateUser} />\r\n                                <Divider\r\n                                    className={css`\r\n                                        margin: 20px 0 !important;\r\n                                    `}\r\n                                />\r\n                                <Typography\r\n                                    className={css`\r\n                                        margin-bottom: 20px !important;\r\n                                    `}\r\n                                >\r\n                                    Сменить пароль\r\n                                </Typography>\r\n                                <ChangePassword error={passwordError} onSubmit={onUpdatePassword} />\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Card title={\"Роли\"}>\r\n                                {user?.roles?.map((role) => (\r\n                                    <Chip\r\n                                        key={role._id}\r\n                                        label={role.title}\r\n                                        variant={\"outlined\"}\r\n                                        color={\"primary\"}\r\n                                        className={css`\r\n                                            margin: 0 20px 20px 0;\r\n                                        `}\r\n                                    />\r\n                                ))}\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Snackbar\r\n                open={snackbar.open}\r\n                message={snackbar.message}\r\n                error={error}\r\n                onClose={onSnackbarClose}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { css } from \"emotion\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\";\r\n\r\ninterface ITableWrapperProps {\r\n    buttonTitle?: string;\r\n\r\n    handler?(): void;\r\n}\r\n\r\nconst styles = {\r\n    wrapper: css`\r\n        height: 100%;\r\n    `,\r\n    button: css`\r\n        position: fixed !important;\r\n        right: 24px;\r\n        bottom: 24px;\r\n        z-index: 10;\r\n    `,\r\n};\r\n\r\nexport const TableWrapper: FC<ITableWrapperProps> = (props) => {\r\n    const { buttonTitle = \"Добавить\", handler, children } = props;\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            {children}\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                startIcon={<Add />}\r\n                onClick={handler}\r\n                className={styles.button}\r\n            >\r\n                {buttonTitle}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { TableWrapper } from \"../../widgets/table-wrapper\";\r\nimport { Link, Paper, Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\r\nimport { css } from \"emotion\";\r\nimport { ICreatePageRequest, IPagesTableRow, TLang } from \"../../entities\";\r\nimport { CreatePagePopup } from \"../../widgets/create-page-popup\";\r\nimport { useCreatePage } from \"../../hooks/page\";\r\nimport { AppContext } from \"../../context\";\r\nimport { formatData, getServerError } from \"../../utils\";\r\n\r\ninterface IPageListProps {\r\n    body?: IPagesTableRow[];\r\n    lang?: TLang;\r\n\r\n    setLanguage(lang: TLang): void;\r\n}\r\n\r\nconst classNames = {\r\n    headCell: css`\r\n        font-weight: 600 !important;\r\n    `,\r\n    bodyRow: css`\r\n        cursor: pointer;\r\n        :hover {\r\n            background: rgba(0, 0, 0, 0.04);\r\n        }\r\n    `,\r\n};\r\n\r\nexport const PagesList = (props: IPageListProps) => {\r\n    const { body = [], setLanguage, lang = \"ru\" } = props;\r\n\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [error, setError] = useState<undefined | string>(undefined);\r\n\r\n    useEffect(() => setLanguage(lang), [lang, setLanguage]);\r\n\r\n    const { createPage } = useCreatePage(lang);\r\n\r\n    function onModalOpen(): void {\r\n        setModalVisible(true);\r\n    }\r\n\r\n    function onModalClose(): void {\r\n        setModalVisible(false);\r\n    }\r\n\r\n    const onCreatePage = useCallback(\r\n        (data: ICreatePageRequest) => {\r\n            createPage(data)\r\n                .then((response) => {\r\n                    AppContext.getHistory().push(`/panel/pages/${response.data._id}`);\r\n                    setError(undefined);\r\n                })\r\n                .catch((error) => {\r\n                    const err = getServerError(error);\r\n                    setError(err?.title);\r\n                });\r\n        },\r\n        [createPage],\r\n    );\r\n\r\n    const onClickRow = (id: string) => {\r\n        AppContext.getHistory().push(`/panel/pages/${id}`);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableWrapper handler={onModalOpen}>\r\n                <Paper>\r\n                    <Table\r\n                        classes={{\r\n                            root: css`\r\n                                table-layout: fixed;\r\n                            `,\r\n                        }}\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell classes={{ root: classNames.headCell }}>Автор</TableCell>\r\n                                <TableCell classes={{ root: classNames.headCell }}>\r\n                                    Название\r\n                                </TableCell>\r\n                                <TableCell classes={{ root: classNames.headCell }}>\r\n                                    Статус\r\n                                </TableCell>\r\n                                <TableCell classes={{ root: classNames.headCell }}>\r\n                                    Дата создания\r\n                                </TableCell>\r\n                                <TableCell classes={{ root: classNames.headCell }}>\r\n                                    Последнее изменение\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {body.map((item) => (\r\n                                <TableRow\r\n                                    classes={{ root: classNames.bodyRow }}\r\n                                    key={item._id}\r\n                                    onClick={() => onClickRow(item._id)}\r\n                                >\r\n                                    <TableCell>\r\n                                        <Link\r\n                                            onMouseDown={() =>\r\n                                                AppContext.getHistory().push(\r\n                                                    `/users/${item.author._id}`,\r\n                                                )\r\n                                            }\r\n                                            component={\"button\"}\r\n                                        >\r\n                                            {item.author.title}\r\n                                        </Link>\r\n                                    </TableCell>\r\n                                    <TableCell>{item.title}</TableCell>\r\n                                    <TableCell>{item.status.title}</TableCell>\r\n                                    <TableCell>\r\n                                        {formatData(item.createdAt, \"DD.MM.YYYY HH:mm\")}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {formatData(item.updatedAt, \"DD.MM.YYYY HH:mm\")}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </Paper>\r\n            </TableWrapper>\r\n            <CreatePagePopup\r\n                visible={modalVisible}\r\n                onClose={onModalClose}\r\n                onSubmit={onCreatePage}\r\n                error={error}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { Children, FC, useState } from \"react\";\r\nimport { Paper, Tab, Tabs } from \"@material-ui/core\";\r\nimport { css } from \"emotion\";\r\n\r\nconst classNames = {\r\n    content: css`\r\n        margin-top: 20px;\r\n    `\r\n};\r\n\r\nexport const LanguageTab: FC = (props) => {\r\n    const { children } = props;\r\n\r\n    const [value, setValue] = useState(0);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper>\r\n                <Tabs\r\n                    variant=\"fullWidth\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"secondary\"\r\n                >\r\n                    <Tab label=\"Русский сайт\" />\r\n                    <Tab label=\"Английский сайт\" />\r\n                </Tabs>\r\n            </Paper>\r\n            <div className={classNames.content}>\r\n                {value === 0 && Children.map(children, (child) => child)[0]}\r\n                {value === 1 && Children.map(children, (child) => child)[1]}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { PagesList } from \"../pages-list\";\r\nimport { TLang } from \"../../entities\";\r\nimport { usePageList } from \"../../hooks/page\";\r\nimport { LanguageTab } from \"../../widgets/language-tab\";\r\n\r\ninterface IPagesProps {\r\n    setPageTitle(title: string): void;\r\n}\r\n\r\nexport const Pages = (props: IPagesProps) => {\r\n    const { setPageTitle } = props;\r\n\r\n    useEffect(() => setPageTitle(\"Страницы\"), [setPageTitle]);\r\n\r\n    const [language, setLanguage] = useState<TLang>(\"ru\");\r\n\r\n    const { pages } = usePageList(language);\r\n\r\n    return (\r\n        <LanguageTab>\r\n            <PagesList setLanguage={setLanguage} lang={\"ru\"} body={pages} />\r\n            <PagesList setLanguage={setLanguage} lang={\"en\"} body={pages} />\r\n        </LanguageTab>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { usePage } from \"../../hooks/page\";\r\nimport { css } from \"emotion\";\r\nimport { CustomForm } from \"../../components/custom-form\";\r\nimport { IPage } from \"../../entities\";\r\nimport { TextField } from \"../../components/text-field\";\r\nimport cn from \"classnames\";\r\nimport { Select } from \"../../components/select\";\r\nimport { Avatar, Button, CircularProgress, IconButton, Link, Paper, Typography } from \"@material-ui/core\";\r\nimport { AccountCircle, ArrowBack, Save } from \"@material-ui/icons\";\r\nimport { formatData, getServerError } from \"../../utils\";\r\nimport { isEqual } from \"lodash\";\r\nimport { AppContext } from \"../../context\";\r\nimport { Snackbar } from \"../../components/snackbar\";\r\nimport { useSnackbar } from \"../../hooks\";\r\n\r\ninterface IPageProps {\r\n    setPageTitle(title: string): void;\r\n}\r\n\r\nconst classNames = {\r\n    line: css`\r\n        display: grid;\r\n        align-items: center;\r\n    `,\r\n    fieldLine: css`\r\n        grid-template-columns: 400px 400px 400px;\r\n        grid-column-gap: 40px;\r\n    `,\r\n    content: css`\r\n        padding: 24px;\r\n    `,\r\n    mb24: css`\r\n        margin-bottom: 24px;\r\n    `,\r\n};\r\n\r\nexport const Page = (props: IPageProps) => {\r\n    const { setPageTitle } = props;\r\n    const { id } = useParams();\r\n\r\n    const { page, statuses, pageAuthor, updatePage } = usePage(String(id));\r\n    const { error, snackbar, setSnackbarError, setSnackbarState, onSnackbarClose } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        if (!page) {\r\n            return;\r\n        }\r\n        setPageTitle(page?.title);\r\n    }, [page, setPageTitle]);\r\n\r\n    const goToList = () => {\r\n        AppContext.getHistory().push(\"/panel/pages\");\r\n    };\r\n\r\n    const onUpdate = (data: Partial<IPage>) => {\r\n         updatePage(data).catch((error) => {\r\n             const err = getServerError(error);\r\n             setSnackbarError(true);\r\n             setSnackbarState({\r\n                 open: true,\r\n                 message: err?.title ?? \"\"\r\n             });\r\n         })\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <IconButton onClick={goToList}>\r\n                <ArrowBack />\r\n            </IconButton>\r\n            <Paper className={classNames.content}>\r\n                {!!page ? (\r\n                    <React.Fragment>\r\n                        <div className={cn(css`display: flex`, classNames.mb24)}>\r\n                            <div className={css`display: flex; margin-right: 20px;`}>\r\n                                <Typography className={css`margin-right: 5px !important`}>Автор: </Typography>\r\n                                {pageAuthor?.avatar ? <Avatar src={pageAuthor?.avatar} /> : <AccountCircle />}\r\n                                <Link href={`/user/${pageAuthor?._id}`} className={css`margin-left: 5px !important;`}>{pageAuthor?.title}</Link>\r\n                            </div>\r\n                            <div className={css`display: flex; margin-right: 20px;`}>\r\n                                <Typography className={css`margin-right: 5px !important`}>Дата создания: </Typography>\r\n                                <Typography className={css`margin-right: 5px !important`}>{formatData(page.createdAt, \"DD.MM.YYYY HH:mm\")}</Typography>\r\n                            </div>\r\n                            <div className={css`display: flex; margin-right: 20px;`}>\r\n                                <Typography className={css`margin-right: 5px !important`}>Последнее обновление: </Typography>\r\n                                <Typography className={css`margin-right: 5px !important`}>{formatData(page.updatedAt, \"DD.MM.YYYY HH:mm\")}</Typography>\r\n                            </div>\r\n                        </div>\r\n                        <CustomForm<IPage>\r\n                            onSubmit={onUpdate}\r\n                            data={page}\r\n                            render={(form) => (\r\n                                <React.Fragment>\r\n                                    <div className={cn(classNames.fieldLine, classNames.line, classNames.mb24)}>\r\n                                        <TextField\r\n                                            name={\"title\"}\r\n                                            label={\"Название страницы\"}\r\n                                        />\r\n                                        <TextField\r\n                                            name={\"link\"}\r\n                                            label={\"Ссылка\"}\r\n                                        />\r\n                                        <Select\r\n                                            label={\"Статус\"}\r\n                                            name={\"statusId\"}\r\n                                            options={statuses.map((item) => ({\r\n                                                value: item._id,\r\n                                                label: item.title,\r\n                                            }))}\r\n                                        />\r\n                                    </div>\r\n                                    <div className={css`display: flex; justify-content: flex-end;`}>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            startIcon={<Save />}\r\n                                            onClick={form?.submitForm}\r\n                                            size={\"large\"}\r\n                                            disabled={isEqual(form?.values, form?.initialValues)}\r\n                                        >\r\n                                            Сохранить\r\n                                        </Button>\r\n                                    </div>\r\n                                </React.Fragment>\r\n                            )}\r\n                        />\r\n                    </React.Fragment>\r\n                ) : (\r\n                    <CircularProgress />\r\n                )}\r\n            </Paper>\r\n            <Snackbar\r\n                open={snackbar.open}\r\n                message={snackbar.message}\r\n                error={error}\r\n                onClose={onSnackbarClose}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { IUser } from \"../../entities\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { Navigation } from \"../navigation\";\r\nimport { Footer } from \"../footer\";\r\nimport { Layout } from \"../../widgets/layout\";\r\nimport { Profile } from \"../profile\";\r\nimport { Pages } from \"../pages\";\r\nimport { Page } from \"../page\";\r\n\r\ninterface INavigationProps {\r\n    baseUrl?: string;\r\n    user?: IUser;\r\n\r\n    onLogout?(): void;\r\n}\r\n\r\nexport const WorkPanel = (props: INavigationProps) => {\r\n    const { baseUrl, onLogout } = props;\r\n    const [user, setUser] = useState<IUser | undefined>(props.user);\r\n    const [title, setTitle] = useState(\"\");\r\n\r\n    useEffect(() => setUser(props.user), [props.user]);\r\n\r\n    return (\r\n        <Layout title={title} user={user} onLogout={onLogout}>\r\n            <Switch>\r\n                <Route path={`${baseUrl}/navigation`}>\r\n                    <Navigation setPageTitle={setTitle}  />\r\n                </Route>\r\n                <Route path={`${baseUrl}/footer`}>\r\n                    <Footer setPageTitle={setTitle} />\r\n                </Route>\r\n                <Route path={`${baseUrl}/profile`}>\r\n                    <Profile setPageTitle={setTitle} onSetUser={setUser} />\r\n                </Route>\r\n                <Route path={`${baseUrl}/pages`} exact>\r\n                    <Pages setPageTitle={setTitle} />\r\n                </Route>\r\n                <Route path={`${baseUrl}/pages/:id`} exact>\r\n                    <Page setPageTitle={setTitle} />\r\n                </Route>\r\n            </Switch>\r\n        </Layout>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\n\r\ninterface IPrivateRouteProps extends RouteProps {\r\n    auth: boolean;\r\n    render: ((props: RouteComponentProps) => React.ReactNode);\r\n}\r\n\r\nexport const PrivateRoute = (props: IPrivateRouteProps) => {\r\n    const {render, auth, ...rest } = props;\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(routeProps: RouteComponentProps) => (\r\n                auth ? (\r\n                    render(routeProps)\r\n                ) : (\r\n                    <Redirect exact push to={\"/sign-in\"}/>\r\n                )\r\n            )}\r\n        />\r\n    );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Route, Redirect, RouteProps, RouteComponentProps } from \"react-router\";\r\n\r\ninterface IPublicRouteProps extends RouteProps {\r\n    auth: boolean;\r\n    restricted?: boolean;\r\n    render: (props: RouteComponentProps) => React.ReactNode;\r\n}\r\n\r\nexport const PublicRoute: FC<IPublicRouteProps> = (props) => {\r\n    const { auth, render, restricted, ...rest } = props;\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(routeProps: RouteComponentProps) =>\r\n                auth && restricted ? (\r\n                    <Redirect exact={true} push={true} to={\"/panel/navigation\"} />\r\n                ) : (\r\n                    render(routeProps)\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Transport } from \"../../transport\";\r\nimport Helmet from \"react-helmet\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Container,\r\n    CssBaseline,\r\n    Grid,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { Lock } from \"@material-ui/icons\";\r\nimport { TextField } from \"../../components/text-field\";\r\nimport { CustomForm } from \"../../components/custom-form\";\r\nimport { forgotPassword } from \"../../api\";\r\nimport { getServerError } from \"../../utils\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { green } from \"@material-ui/core/colors\";\r\n\r\ninterface IForgotPasswordProps {\r\n    transport: Transport;\r\n}\r\n\r\nconst FormSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email(\"Невалидный e-mail\")\r\n        .required(\"Поле обязательно для заполнения\"),\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        marginBottom: 20,\r\n    },\r\n    field: {\r\n        margin: \"0 0 20px 0\",\r\n    },\r\n    row: {\r\n        marginBottom: 20,\r\n    },\r\n    loader: {\r\n        width: \"100%\",\r\n        marginBottom: 30,\r\n    },\r\n    successMessage: {\r\n        color: green[600]\r\n    }\r\n}));\r\n\r\nexport const ForgotPassword = (props: IForgotPasswordProps) => {\r\n    const { transport } = props;\r\n    const [loaderVisible, setLoaderVisible] = useState(false);\r\n    const [serverErrorMessage, setServerErrorMessage] = useState<string | undefined>(undefined);\r\n    const [successMessage, setSuccessMessage] = useState<string | undefined>(undefined);\r\n\r\n    const onSubmit = (data: { email: string }) => {\r\n        setLoaderVisible(true);\r\n        setServerErrorMessage(undefined);\r\n        setSuccessMessage(undefined);\r\n        forgotPassword(transport, data)\r\n            .then((response) => {\r\n                setLoaderVisible(false);\r\n                setSuccessMessage(response.data);\r\n            })\r\n            .catch((error) => {\r\n                const err = getServerError(error);\r\n                setLoaderVisible(false);\r\n                setServerErrorMessage(err?.title);\r\n            });\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Восстановление пароля</title>\r\n            </Helmet>\r\n            <CustomForm\r\n                onSubmit={onSubmit}\r\n                validationSchema={FormSchema}\r\n                validateOnChange={false}\r\n                render={(form) => (\r\n                    <Container component=\"main\" maxWidth=\"xs\">\r\n                        <CssBaseline />\r\n                        <div className={classes.paper}>\r\n                            <Avatar className={classes.avatar}>\r\n                                <Lock />\r\n                            </Avatar>\r\n                            <Typography component=\"h1\" variant=\"h5\" className={classes.row}>\r\n                                Восстановление пароля\r\n                            </Typography>\r\n                            <TextField\r\n                                name={\"email\"}\r\n                                label={\"E-mail\"}\r\n                                error={!!serverErrorMessage}\r\n                                classes={{ root: classes.field }}\r\n                            />\r\n                            {loaderVisible && (\r\n                                <LinearProgress className={`${classes.loader} ${classes.row}`} />\r\n                            )}\r\n                            {serverErrorMessage && (\r\n                                <Typography\r\n                                    color={\"error\"}\r\n                                    align={\"center\"}\r\n                                    className={classes.row}\r\n                                >\r\n                                    {serverErrorMessage}\r\n                                </Typography>\r\n                            )}\r\n                            {successMessage && (\r\n                                <Typography\r\n                                    align={\"center\"}\r\n                                    className={`${classes.row} ${classes.successMessage}`}\r\n                                >\r\n                                    {successMessage}\r\n                                </Typography>\r\n                            )}\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={form?.submitForm}\r\n                                disabled={loaderVisible}\r\n                                className={classes.submit}\r\n                            >\r\n                                Отправить\r\n                            </Button>\r\n                            <Grid container>\r\n                                <Grid item xs>\r\n                                    <Link to=\"/sign-in\">\r\n                                        Войти\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Container>\r\n                )}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { Router, Switch } from \"react-router\";\r\nimport { AppContext } from \"../context\";\r\nimport { Login } from \"../pages/login\";\r\nimport { WorkPanel } from \"../pages/work-panel\";\r\nimport { Transport } from \"../transport\";\r\nimport { IToken, IUser } from \"../entities\";\r\nimport { fetchUser } from \"../api\";\r\nimport { PrivateRoute } from \"../components/private-route\";\r\nimport { PublicRoute } from \"../components/public-route\";\r\nimport { ForgotPassword } from \"../pages/forgot-password\";\r\n\r\nconst App: React.FC = () => {\r\n    const [user, setUser] = useState<IUser | undefined>(undefined);\r\n    const transport = useMemo(() => new Transport(), []);\r\n    const [logged, setLogged] = useState(!!localStorage.getItem(\"token\"));\r\n\r\n    useEffect(() => {\r\n        const tokenString = localStorage.getItem(\"token\");\r\n        if (!tokenString) {\r\n            localStorage.removeItem(\"token\");\r\n            AppContext.getHistory().push(\"/sign-in\");\r\n            return;\r\n        }\r\n        const token: IToken = JSON.parse(tokenString);\r\n        transport.setToken(token);\r\n        fetchUser(transport)\r\n            .then((response) => {\r\n                setUser(response.data);\r\n            })\r\n            .catch(() => {\r\n                localStorage.removeItem(\"token\");\r\n                AppContext.getHistory().push(\"/sign-in\");\r\n            });\r\n    }, [transport]);\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem(\"token\");\r\n        setLogged(false);\r\n        AppContext.getHistory().push(\"/sign-in\");\r\n    };\r\n\r\n    return (\r\n        <Router history={AppContext.getHistory()}>\r\n            <Switch>\r\n                <PublicRoute\r\n                    auth={logged}\r\n                    exact={true}\r\n                    restricted={true}\r\n                    path={\"/sign-in\"}\r\n                    render={() => (\r\n                        <Login\r\n                            transport={transport}\r\n                            onSetUser={setUser}\r\n                            onSignIn={() => setLogged(true)}\r\n                        />\r\n                    )}\r\n                />\r\n                <PublicRoute\r\n                    auth={logged}\r\n                    restricted={true}\r\n                    path={\"/forgot-password\"}\r\n                    exact={true}\r\n                    render={() => <ForgotPassword transport={transport} />}\r\n                />\r\n                <PrivateRoute\r\n                    auth={logged}\r\n                    path={\"/panel/:page\"}\r\n                    render={() => (\r\n                        <WorkPanel\r\n                            user={user}\r\n                            baseUrl={\"/panel\"}\r\n                            onLogout={logout}\r\n                        />\r\n                    )}\r\n                />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}